// Модуль для обработки команд для Web-Сервиса

// Обработка аутентификации и идентиифкации пользователя на сервере
Функция АвторизоватьПользователя(ЛогинВведенный, ПарольВведенный) Экспорт
    // Проверка входных параметров
    Если ПустаяСтрока(ЛогинВведенный) Или ПустаяСтрока(ПарольВведенный) Тогда
        Возврат "";
    КонецЕсли;

    Попытка
		
		// Перебор пользователей
        Выборка = Справочники.Пользователи.Выбрать();
		Пока Выборка.Следующий() Цикл
			
            Если Не ПустаяСтрока(Выборка.Логин) И Не ПустаяСтрока(Выборка.Пароль) Тогда
                // Проверка хэша логина
                Если СервисАвторизации.ПроверитьПароль(Выборка.Логин, ЛогинВведенный) Тогда
                    // Проверка хэша пароля
                    Если СервисАвторизации.ПроверитьПароль(Выборка.Пароль, ПарольВведенный) Тогда
                        // Формирование строки результата
                        РольСтрокой = ?(Выборка.Роль = Перечисления.Роль.Пассажир, "Пассажир", "Водитель");
                        Результат = Выборка.Логин + " " + Выборка.Пароль + " " + РольСтрокой + " " + Выборка.Наименование + " " + Выборка.Код;
                        Возврат Результат;
                    КонецЕсли;
                КонецЕсли;
            КонецЕсли;
		КонецЦикла;
		
		Возврат "";

    Исключение
        Возврат "";
    КонецПопытки;
КонецФункции

// Возвращает номер отправленного сообщения для узла обмена из регистра сведений
Функция ПолучитьНомерОтправленного(УзелОбмена = Неопределено) Экспорт
    
    // Если узел обмена не указан, используем текущий узел
    Если УзелОбмена = Неопределено Тогда
        УзелОбмена = ПланыОбмена.Мобильные.ЭтотУзел();
    КонецЕсли;
    
    // Создаём менеджер записи для регистра НастройкиСинхронизации
    Запись = РегистрыСведений.НастройкиСинхронизации.СоздатьМенеджерЗаписи();
    Запись.Ключ = "НомерОтправленного";
    
    // Если в регистре есть измерение Узел, устанавливаем его
    Если Метаданные.РегистрыСведений.НастройкиСинхронизации.Измерения.Найти("Узел") <> Неопределено Тогда
        Запись.Узел = УзелОбмена;
    КонецЕсли;
    
    // Читаем запись из регистра
    Запись.Прочитать();
    
    // Проверяем, существует ли запись
    Если Запись.Выбран() Тогда
        Значение = Запись.Значение.Получить();
        // Проверяем, является ли значение числом
        Если ТипЗнч(Значение) = Тип("Число") Тогда
            Сообщить("Получен НомерОтправленного из регистра: " + Значение);
            Возврат Значение;
        Иначе
            Сообщить("Ошибка: Значение НомерОтправленного не является числом, возвращено 0");
            Возврат 0;
        КонецЕсли;
    КонецЕсли;
    
    // Если запись не найдена, возвращаем 0
    Сообщить("Запись для НомерОтправленного не найдена, возвращено 0");
    Возврат 0;
КонецФункции

// Формирует пакет обмена для узла
Функция СформироватьПакетОбмена(УзелОбмена) Экспорт
    ТекущийУзел = ПланыОбмена.Мобильные.ЭтотУзел();
    Сообщить("Текущий узел базы: " + ТекущийУзел + ", Код: " + ТекущийУзел.Код); 
	
	// Получаем последний номер из регистра
    ПоследнийНомер = ПолучитьНомерОтправленного(УзелОбмена);
    // Начинаем с 1, если это первый обмен, иначе увеличиваем
    НовыйНомер = ?(ПоследнийНомер = 0, 1, ПоследнийНомер + 1);
    Сообщить("Последний сохраненный НомерОтправленного: " + ПоследнийНомер);
    Сообщить("Сформирован НовыйНомер: " + НовыйНомер);
	
    УстановитьПривилегированныйРежим(Истина);
    
    ЗаписьXML = Новый ЗаписьXML;
    ЗаписьXML.УстановитьСтроку("UTF-8");
    ЗаписьXML.ЗаписатьОбъявлениеXML();
    
    // Создаем запись сообщения
    ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
    Попытка
        ЗаписьСообщения.НачатьЗапись(ЗаписьXML, УзелОбмена);
    Исключение
        Сообщить("Ошибка при начале записи: " + ОписаниеОшибки());
        Возврат Неопределено;
    КонецПопытки;
        
    ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
    ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8", "http://v8.1c.ru/data");
    
    // Выбираем изменения для узла
    ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(УзелОбмена, ЗаписьСообщения.НомерСообщения);
    КоличествоИзменений = 0;
    Пока ВыборкаИзменений.Следующий() Цикл
        Данные = ВыборкаИзменений.Получить();
        Сообщить("Выбраны изменения для объекта: " + Данные);
        
        Если Не НуженПереносДанных(Данные, УзелОбмена) Тогда
            УдалениеДанных(Данные);
            Продолжить;
        КонецЕсли;
        
        ЗаписатьXML(ЗаписьXML, Данные);
        КоличествоИзменений = КоличествоИзменений + 1;
    КонецЦикла;
    
    Если КоличествоИзменений = 0 Тогда
        Сообщить("Нет изменений для передачи в узел " + УзелОбмена);
    Иначе
        Сообщить("Записано изменений: " + КоличествоИзменений);
    КонецЕсли;
    
    Попытка
        ЗаписьСообщения.ЗакончитьЗапись();
    Исключение
        Сообщить("Ошибка при завершении записи: " + ОписаниеОшибки());
        Возврат Неопределено;
    КонецПопытки;
    
    // Сохраняем XML для отладки
    СтрокаXML = ЗаписьXML.Закрыть();
    Сообщить("Сформированный XML: " + СтрокаXML);
    
    Возврат Новый ХранилищеЗначения(СтрокаXML, Новый СжатиеДанных(9));
КонецФункции

// Проверяет, нужны ли данные для переноса
Функция НуженПереносДанных(Данные, УзелОбмена)
    // Исключаем справочник Пользователи из обмена
    Если ТипЗнч(Данные) = Тип("СправочникОбъект.Пользователи") Тогда
        Возврат Ложь;
    КонецЕсли;
        
    Возврат Истина; // По умолчанию переносим данные
КонецФункции

// Принимает и обрабатывает пакет обмена от указанного узла
Процедура ПринятьПакетОбмена(УзелОбмена, ДанныеОбмена) Экспорт
    
    // Включаем привилегированный режим для выполнения операций
    УстановитьПривилегированныйРежим(Истина);
    
    // Инициализируем чтение XML-данных из пакета
    ЧтениеXML = Новый ЧтениеXML;
    ЧтениеXML.УстановитьСтроку(ДанныеОбмена.Получить());
    
    // Создаём объект для чтения сообщения обмена
    ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
    ЧтениеСообщения.НачатьЧтение(ЧтениеXML);
    
    // Начинаем транзакцию для целостности данных
    НачатьТранзакцию();
    
    // Читаем данные из XML, пока они доступны
    Пока ВозможностьЧтенияXML(ЧтениеXML) Цикл
        Данные = ПрочитатьXML(ЧтениеXML);
        Если Данные <> Неопределено Тогда
            // Проверяем возможность принятия изменений
            Если Не ПринятьИзменения(ЧтениеСообщения.Отправитель, Данные) Тогда
                Продолжить;
            КонецЕсли;
            // Устанавливаем отправителя и режим загрузки
            Данные.ОбменДанными.Отправитель = ЧтениеСообщения.Отправитель;
            Данные.ОбменДанными.Загрузка = Истина;
            // Записываем данные
            Данные.Записать();
        КонецЕсли;
    КонецЦикла;
    
    // Фиксируем транзакцию
    ЗафиксироватьТранзакцию();
    
    // Завершаем чтение сообщения
    ЧтениеСообщения.ЗакончитьЧтение();
    // Закрываем XML-поток
    ЧтениеXML.Закрыть();
    
КонецПроцедуры
// Удаляет данные
Процедура УдалениеДанных(Данные)
    Если ТипЗнч(Данные) = Тип("УдалениеОбъекта") Тогда
        Данные.Записать();
    КонецЕсли;
КонецПроцедуры

// Сохраняет номер отправленного сообщения для узла обмена в регистр сведений
Процедура СохранитьНомерОтправленного(УзелОбмена, Номер) Экспорт
    
    // Создаём менеджер записи для регистра НастройкиСинхронизации
    Запись = РегистрыСведений.НастройкиСинхронизации.СоздатьМенеджерЗаписи();
    Запись.Ключ = "НомерОтправленного";
    
    // Если в регистре есть измерение Узел, устанавливаем его
    Если Метаданные.РегистрыСведений.НастройкиСинхронизации.Измерения.Найти("Узел") <> Неопределено Тогда
        Запись.Узел = УзелОбмена;
    КонецЕсли;
    
    // Читаем существующую запись
    Запись.Прочитать();
    
    // Устанавливаем значение номера в хранилище
    Запись.Значение = Новый ХранилищеЗначения(Номер);
    
    // Записываем данные в регистр
    Запись.Записать(Истина);
    
    // Выводим сообщение о сохранении
    Сообщить("Сохранено значение НомерОтправленного: " + Номер);
    
КонецПроцедуры

// Возвращает номер принятого сообщения для узла обмена из регистра сведений
Функция ПолучитьНомерПринятого(УзелОбмена) Экспорт
    
    // Создаём менеджер записи для регистра НастройкиСинхронизации
    Запись = РегистрыСведений.НастройкиСинхронизации.СоздатьМенеджерЗаписи();
    Запись.Ключ = "НомерПринятого";
    
    // Если в регистре есть измерение Узел, устанавливаем его
    Если Метаданные.РегистрыСведений.НастройкиСинхронизации.Измерения.Найти("Узел") <> Неопределено Тогда
        Запись.Узел = УзелОбмена;
    КонецЕсли;
    
    // Читаем запись из регистра
    Запись.Прочитать();
    
    // Проверяем, существует ли запись
    Если Запись.Выбран() Тогда
        Значение = Запись.Значение.Получить();
        // Проверяем, является ли значение числом
        Если ТипЗнч(Значение) = Тип("Число") Тогда
            Сообщить("Получен НомерПринятого из регистра: " + Значение);
            Возврат Значение;
        Иначе
            Сообщить("Ошибка: Значение НомерПринятого не является числом, возвращено 0");
            Возврат 0;
        КонецЕсли;
    КонецЕсли;
    
    // Если запись не найдена, возвращаем 0
    Сообщить("Запись для НомерПринятого не найдена, возвращено 0");
    Возврат 0;
    
КонецФункции

// Сохраняет номер принятого сообщения для узла обмена в регистр сведений
Процедура СохранитьНомерПринятого(УзелОбмена, Номер) Экспорт
    
    // Создаём менеджер записи для регистра НастройкиСинхронизации
    Запись = РегистрыСведений.НастройкиСинхронизации.СоздатьМенеджерЗаписи();
    Запись.Ключ = "НомерПринятого";
    
    // Если в регистре есть измерение Узел, устанавливаем его
    Если Метаданные.РегистрыСведений.НастройкиСинхронизации.Измерения.Найти("Узел") <> Неопределено Тогда
        Запись.Узел = УзелОбмена;
    КонецЕсли;
    
    // Читаем существующую запись
    Запись.Прочитать();
    
    // Устанавливаем значение номера в хранилище
    Запись.Значение = Новый ХранилищеЗначения(Номер);
    
    // Записываем данные в регистр
    Запись.Записать(Истина);
    
    // Выводим сообщение о сохранении
    Сообщить("Сохранено значение НомерПринятого: " + Номер);
    
КонецПроцедуры

// Обмен данными между сервером и мобильным клиентом
Функция НачатьОбмен(КодУзла, НаименованиеМобильногоКомпьютера, НомерОтправленного, НомерПринятого) Экспорт
    УстановитьПривилегированныйРежим(Истина);
    
    // Проверяем текущий узел (001)
    УзелОбмена = ПланыОбмена.Мобильные.ЭтотУзел().ПолучитьОбъект();
    Если НЕ ЗначениеЗаполнено(УзелОбмена.Код) Тогда
        УзелОбмена.Код = "001";
        УзелОбмена.Наименование = "Устройство vlad";
        УзелОбмена.Записать();
    КонецЕсли;
    Сообщить("Текущий узел: " + УзелОбмена.Наименование + ", Код: " + УзелОбмена.Код);
    
    // Получаем последний номер из регистра для узла 001
    ПоследнийНомер = ПолучитьНомерОтправленного(УзелОбмена.Ссылка);
    НовыйНомер = ?(ПоследнийНомер = 0, 1, ПоследнийНомер + 1);
    Сообщить("Последний сохраненный НомерОтправленного (узел 001): " + ПоследнийНомер);
    Сообщить("Сформирован НовыйНомер: " + НовыйНомер);
    
    // Проверяем узел 007
    УзелОбмена = ПланыОбмена.Мобильные.НайтиПоКоду(КодУзла);
    Если УзелОбмена.Пустая() Тогда
        // Создаем новый узел, если его нет
        НовыйУзел = ПланыОбмена.Мобильные.СоздатьУзел();
        НовыйУзел.Код = КодУзла;
        НовыйУзел.Наименование = НаименованиеМобильногоКомпьютера;
        НовыйУзел.Записать();
        ЗарегистрироватьИзмененияДанных(НовыйУзел.Ссылка);
        УзелОбмена = НовыйУзел.Ссылка;
        Сообщить("Создан новый узел: " + НовыйУзел.Наименование);
        
        // Инициализируем номера для нового узла в регистре
        СохранитьНомерОтправленного(УзелОбмена, 0);
        СохранитьНомерПринятого(УзелОбмена, 0);
        Сообщить("Инициализированы номера для узла: НомерОтправленного = 0, НомерПринятого = 0");
    Иначе
        // Проверяем, нужно ли обновить узел
        Если УзелОбмена.ПометкаУдаления ИЛИ УзелОбмена.Наименование <> НаименованиеМобильногоКомпьютера Тогда
            Узел = УзелОбмена.ПолучитьОбъект();
            Узел.ПометкаУдаления = Ложь;
            Узел.Наименование = НаименованиеМобильногоКомпьютера;
            Узел.Записать();
            Сообщить("Обновлен узел: " + Узел.Наименование);
        КонецЕсли;
        
        // Не сбрасываем номера, а читаем их из регистра
        НомерОтправленногоУзла = ПолучитьНомерОтправленного(УзелОбмена);
        НомерПринятогоУзла = ПолучитьНомерПринятого(УзелОбмена);
        Сообщить("Текущие номера узла: НомерОтправленного = " + НомерОтправленногоУзла + 
                 ", НомерПринятого = " + НомерПринятогоУзла);
        
        // Если нужно синхронизировать номера (например, после сбоя), можно сделать это здесь
        // Например, установить НомерПринятого = НовыйНомер - 1, чтобы следующий пакет был принят
        Если НомерПринятогоУзла > НовыйНомер Тогда
            СохранитьНомерПринятого(УзелОбмена, НовыйНомер - 1);
            Сообщить("Синхронизирован НомерПринятого для узла: " + (НовыйНомер - 1));
        КонецЕсли;
        
        // Очищаем регистрацию изменений, чтобы передать все данные заново
        ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена);
        ЗарегистрироватьИзмененияДанных(УзелОбмена);
    КонецЕсли;
    
    Возврат КодУзла;
КонецФункции

// Получает данные для узла
Функция ПолучитьДанные(КодУзла) Экспорт
    УзелОбмена = ПланыОбмена.Мобильные.НайтиПоКоду(КодУзла);
    Если УзелОбмена.Пустая() Тогда
        ВызватьИсключение "Неизвестное устройство - " + КодУзла;
    КонецЕсли;
    
    Возврат СформироватьПакетОбмена(УзелОбмена);
КонецФункции

// Записывает данные от узла
Функция ЗаписатьДанные(КодУзла, ДанныеМобильногоПриложения) Экспорт
    УзелОбмена = ПланыОбмена.Мобильные.НайтиПоКоду(КодУзла);
    Если УзелОбмена.Пустая() Тогда
        ВызватьИсключение "Неизвестное устройство - " + КодУзла;
    КонецЕсли;
    
    ПринятьПакетОбмена(УзелОбмена, ДанныеМобильногоПриложения);
КонецФункции

// Выполняет полный обмен данными
Функция ВыполнитьОбменДанными(КодУзла, ДанныеМобильногоПриложения) Экспорт
    УзелОбмена = ПланыОбмена.Мобильные.НайтиПоКоду(КодУзла);
    Если УзелОбмена.Пустая() Тогда
        ВызватьИсключение "Неизвестное устройство - " + КодУзла;
    КонецЕсли;
    
    ПринятьПакетОбмена(УзелОбмена, ДанныеМобильногоПриложения);
    Возврат СформироватьПакетОбмена(УзелОбмена);
КонецФункции

// Регистрирует изменения для узла
Процедура ЗарегистрироватьИзмененияДанных(Узел) Экспорт
    ПланыОбмена.ЗарегистрироватьИзменения(Узел);
КонецПроцедуры

// Изменение данных в центральной базе данных
Функция ВыполнитьИзменение(КодУзла, ПакетОбменаКлиента) Экспорт
    Попытка
        // Проверка узла обмена
        УзелОбмена = ПланыОбмена.Мобильные.НайтиПоКоду(КодУзла);
        Если УзелОбмена.Пустая() Тогда
            Возврат "Ошибка: Узел обмена с кодом " + КодУзла + " не найден";
        КонецЕсли;
        
        // Извлекаем данные из хранилища
        ДанныеПакета = ПакетОбменаКлиента.Получить();
        Если ДанныеПакета = Неопределено Тогда
            Возврат "Ошибка: Данные пакета обмена не получены";
        КонецЕсли;
        
        // Отладочный вывод XML
        Сообщить("Полученный XML: " + ДанныеПакета);
        
        // Читаем XML
        ЧтениеXML = Новый ЧтениеXML;
        ЧтениеXML.УстановитьСтроку(ДанныеПакета);
        
        // Создаем объект чтения сообщения
        ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
        Попытка
            ЧтениеСообщения.НачатьЧтение(ЧтениеXML);
            // Проверка, что отправитель соответствует узлу
            Если ЧтениеСообщения.Отправитель <> УзелОбмена Тогда
                ЧтениеXML.Закрыть();
                Возврат "Ошибка: Отправитель сообщения (" + ЧтениеСообщения.Отправитель.Код + ") не соответствует узлу " + КодУзла;
            КонецЕсли;
        Исключение
            Ошибка = "Ошибка начала чтения сообщения: " + ОписаниеОшибки();
            ЧтениеXML.Закрыть();
            Возврат Ошибка;
        КонецПопытки;
        
        // Обработка изменений
        НачатьТранзакцию();
        Попытка
        	Пока ВозможностьЧтенияXML(ЧтениеXML) Цикл
            	Данные = ПрочитатьXML(ЧтениеXML);
            
            	Если НЕ Данные = Неопределено Тогда

                	Данные.ОбменДанными.Отправитель = ЧтениеСообщения.Отправитель;
                	Данные.ОбменДанными.Загрузка = Истина;
                
                	Данные.Записать();
            	КонецЕсли;
        	КонецЦикла;

            
            ЧтениеСообщения.ЗакончитьЧтение();
            ЗафиксироватьТранзакцию();
        Исключение
            ОтменитьТранзакцию();
            Ошибка = "Ошибка обработки данных: " + ОписаниеОшибки();
            ЧтениеXML.Закрыть();
            Возврат Ошибка;
        КонецПопытки;
        
        ЧтениеXML.Закрыть();
        
        Возврат "Все отлично";
        
    Исключение
        Возврат "Общая ошибка: " + ОписаниеОшибки();
    КонецПопытки;
КонецФункции

// Проверяет возможность принятия изменений для данных от отправителя
Функция ПринятьИзменения(Отправитель, Данные) Экспорт
    
    // По умолчанию изменения принимаются
    Прием = Истина;
    
    // Проверяем, зарегистрировано ли изменение для данных в узле отправителя
    Если ПланыОбмена.ИзменениеЗарегистрировано(Отправитель, Данные) Тогда
        // Отклоняем изменения для объектов определённых типов
        Если ТипЗнч(Данные) = Тип("СправочникОбъект.Адреса") ИЛИ
            ТипЗнч(Данные) = Тип("СправочникОбъект.Маршруты") ИЛИ
            ТипЗнч(Данные) = Тип("СправочникОбъект.Пользователи") ИЛИ
            ТипЗнч(Данные) = Тип("ДокументОбъект.Поездка") Тогда
            Прием = Ложь;
        КонецЕсли;
    КонецЕсли;
    
    // Возвращаем результат проверки
    Возврат Прием;
    
КонецФункции

// Добавление узла
Функция ДобавитьУзел() Экспорт
	
	Возврат СоздатьУзлыОбмена();
	
КонецФункции

// Создание узла обмена для пользователя
&НаСервере
Функция СоздатьУзлыОбмена() Экспорт
    УстановитьПривилегированныйРежим(Истина);

    // Проверка и создание центрального узла
    ЦентральныйУзел = ПланыОбмена.Мобильные.ЭтотУзел().ПолучитьОбъект();
    Если НЕ ЗначениеЗаполнено(ЦентральныйУзел.Код) Тогда
        ЦентральныйУзел.Код = "001";
        ЦентральныйУзел.Наименование = "Центральный";
        ЦентральныйУзел.Записать();
    КонецЕсли;

    // Поиск максимального кода узла без запроса
    МаксимальныйКод = 1;
    ВыборкаУзлов = ПланыОбмена.Мобильные.Выбрать();
    Пока ВыборкаУзлов.Следующий() Цикл
        Если ЗначениеЗаполнено(ВыборкаУзлов.Код) Тогда
            КодЧислом = Число(ВыборкаУзлов.Код);
            Если КодЧислом > МаксимальныйКод Тогда
                МаксимальныйКод = КодЧислом;
            КонецЕсли;
        КонецЕсли;
    КонецЦикла;

    // Генерация нового кода и имени для устройства
    НовыйКодЧислом = МаксимальныйКод + 1;
    НовыйКод = Формат(НовыйКодЧислом, "ЧЦ=3; ЧВН=");
    НовоеНаименование = "МобильноеУстройство" + НовыйКод;

    // Проверка, нет ли узла с таким кодом
    УзелОбмена = ПланыОбмена.Мобильные.НайтиПоКоду(НовыйКод);
    Если УзелОбмена.Пустая() Тогда
        НачатьТранзакцию();
        Попытка
            // Блокировка для безопасного создания узла
            Блокировка = Новый БлокировкаДанных;
            ЭлементБлокировки = Блокировка.Добавить("ПланОбмена.Мобильные");
            ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
            Блокировка.Заблокировать();

            // Создание нового узла
            НовыйУзел = ПланыОбмена.Мобильные.СоздатьУзел();
            НовыйУзел.Код = НовыйКод;
            НовыйУзел.Наименование = НовоеНаименование;
            НовыйУзел.Записать();

            // Регистрация изменений для нового узла
            ПланыОбмена.ЗарегистрироватьИзменения(НовыйУзел.Ссылка);

            ЗафиксироватьТранзакцию();
        Исключение
            ОтменитьТранзакцию();
            ВызватьИсключение "Ошибка при создании узла обмена: " + ОписаниеОшибки();
        КонецПопытки;
    Иначе
        // Если узел уже существует, обновляем наименование, если оно отличается
        Узел = УзелОбмена.ПолучитьОбъект();
        Если УзелОбмена.ПометкаУдаления Или УзелОбмена.Наименование <> НовоеНаименование Тогда
            Узел.ПометкаУдаления = Ложь;
            Узел.Наименование = НовоеНаименование;
            Узел.Записать();
        КонецЕсли;
    КонецЕсли;

    УстановитьПривилегированныйРежим(Ложь);

    // Формирование возвращаемой строки
    Возврат ЦентральныйУзел.Код + " " + ЦентральныйУзел.Наименование + " " + НовыйКод + " " + НовоеНаименование;
КонецФункции

// Регистрация пользователя, запись хэша логина и пароля
Функция РегистрацияПользователя(Логин, Пароль, РольПользователя)
	Если НЕ ПроверитьЛогинПоВсемПользователям(Логин) Тогда
		// Хэширования логина и пароля
        ХэшПароля = СервисАвторизации.ХэшироватьПароль(Пароль);
        ХэшЛогина = СервисАвторизации.ХэшироватьПароль(Логин);
		// Создание уникального идентификатора пользователя
        Наименование = СервисАвторизации.ГенерацияУникальногоНаименования();
		// Получение номера узла обмена пользователя
        Код = СервисАвторизации.ГенерацияУникальногоКода();
        // Запись данных пользователя
        Результат = СервисАвторизации.ОбновитьПользователя(Наименование, РольПользователя, ХэшЛогина, ХэшПароля, Код);
        Если Результат.Успех Тогда
            Возврат Наименование + " " + РольПользователя + " " + Код + " " + ХэшПароля + " " + ХэшЛогина;
        Иначе 
            Возврат "";
        КонецЕсли;
    Иначе
        Возврат "0";
    КонецЕсли;
КонецФункции

//Проверка логина и пароля пользователя
&НаСервере
Функция ПроверитьЛогинПоВсемПользователям(ПроверяемыйЛогин) Экспорт
    Попытка
        // Проверка входных данных
        Если ПустаяСтрока(ПроверяемыйЛогин) Тогда
            Возврат Ложь;
        КонецЕсли;
        
        // Перебор элементов справочника Пользователи
        Выборка = Справочники.Пользователи.Выбрать();
        Пока Выборка.Следующий() Цикл
            Если Не ПустаяСтрока(Выборка.Логин) Тогда
                Если СервисАвторизации.ПроверитьПароль(Выборка.Логин, ПроверяемыйЛогин) Тогда
                    Возврат Истина;
                КонецЕсли;
            КонецЕсли;
        КонецЦикла;
        
        Возврат Ложь;
        
    Исключение
        Возврат Ложь;
    КонецПопытки;
КонецФункции