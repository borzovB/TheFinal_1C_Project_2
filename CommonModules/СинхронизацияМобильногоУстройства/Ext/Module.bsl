// Модуль отвечает за подключение к базе данных

// Осуществление подключения к центральной базе
Процедура СинхронизироватьДанныеНажатие() Экспорт
    КодУзла = ПолучитьКодНовогоУзлаПланаОбмена();
	ТекущийУзел = ПланыОбмена.Мобильные.ЭтотУзел();
    НаименованиеУстройства = ПолучитьНазваниеУзлаУстройства();
	
	//Подключение в серверу
	АдресЦентральнойБазы = ПолучениеДанныхДляСоединения.ПолучитьURLЦентральнойБазы();
	
    Попытка
        WSОпределения = Новый WSОпределения(АдресЦентральнойБазы);
		WSПрокси = Новый WSПрокси(WSОпределения, ПолучениеДанныхДляСоединения.ПолучитьПроостранствоИмен(), "AuthService", "AuthServiceSoap");
		
    Исключение
        Сообщить("Ошибка подключения: " + ОписаниеОшибки() + АдресЦентральнойБазы);
	КонецПопытки;
    
    // Инициализация узла
    НомерОтправленного = 0;
    НомерПринятого = 0;
    Попытка
        WSПрокси.НачатьОбмен(КодУзла, НаименованиеУстройства, НомерОтправленного, НомерПринятого);
    Исключение
        Возврат;
    КонецПопытки;
    
    // Получение данных справочников
    Попытка
        ПакетОбмена = WSПрокси.ПолучитьДанные(КодУзла);
        ОбработатьПакетОбмена(КодУзла, ПакетОбмена);
    Исключение
        Возврат;
    КонецПопытки;
КонецПроцедуры

// Процедура выполняется на клиенте при закрытии формы
&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
    // Отключаем запрос на сохранение изменений при закрытии формы
    Если Модифицированность Тогда
        Модифицированность = Ложь; // Сбрасываем модифицированность
    КонецЕсли;
КонецПроцедуры

// Полученрие кода чентральной базы из константы
&НаСервере
Функция ПолучитьКодУзлаЦентральнойБазы()
    Попытка
        Возврат Константы.КодУзлаЦентральнойБазы.Получить();
    Исключение
        Возврат "";
    КонецПопытки;
КонецФункции

// Получение кода узла обмена устройства из константы
&НаСервере
Функция ПолучитьКодНовогоУзлаПланаОбмена()
    Попытка
        Возврат Константы.КодНовогоУзлаПланаОбмена.Получить();
    Исключение
        Возврат "";
    КонецПопытки;
КонецФункции

// Получение узла центральной базы из константы
&НаСервере
Функция ПолучитьНазваниеЦентральногоУзла()
    Попытка
        Возврат Константы.НазваниеЦентральногоУзла.Получить();
    Исключение
        Возврат "";
    КонецПопытки;
КонецФункции

// Получение названия устройства
&НаСервере
Функция ПолучитьНазваниеУзлаУстройства()
    Попытка
        Возврат Константы.НазваниеУзлаУстройства.Получить();
    Исключение
        Возврат "";
    КонецПопытки;
КонецФункции

// Процедура выполняет синхронизацию данных поездок с центральной базой через веб-сервис
Процедура СинхронизироватьПоездки() Экспорт
	// Получаем код текущего узла обмена для идентификации клиента
    КодУзла = ПолучитьКодНовогоУзлаПланаОбмена();
	// Получаем текущий узел плана обмена "Мобильные"
	ТекущийУзел = ПланыОбмена.Мобильные.ЭтотУзел();
	// Получаем наименование устройства для передачи в веб-сервис
    НаименованиеУстройства = ПолучитьНазваниеУзлаУстройства();
	
	//Получаем URL центральной базы для подключения к веб-сервису
	АдресЦентральнойБазы = ПолучениеДанныхДляСоединения.ПолучитьURLЦентральнойБазы();
	
	// Установка соединения с центральной базой
    Попытка
        WSОпределения = Новый WSОпределения(АдресЦентральнойБазы);
		WSПрокси = Новый WSПрокси(WSОпределения, ПолучениеДанныхДляСоединения.ПолучитьПроостранствоИмен(), "AuthService", "AuthServiceSoap");
		
    Исключение
        Сообщить("Ошибка подключения: " + ОписаниеОшибки() + АдресЦентральнойБазы);
	КонецПопытки;

    
    // Получение данных поездок и координат
    Попытка
        ПакетОбмена = WSПрокси.ПолучитьДанные(КодУзла);
        ОбработатьПакетОбмена(КодУзла, ПакетОбмена);
    Исключение
        Сообщить("Ошибка получения данных: " + ОписаниеОшибки());
        Возврат;
    КонецПопытки;
    
    // Сохранение времени синхронизации
    СохранитьВремяСинхронизации(ТекущаяДата());
КонецПроцедуры

// Процедура обрабатывает полученный пакет обмена, записывая данные в базу
Процедура ОбработатьПакетОбмена(УзелОбмена, ДанныеОбмена) Экспорт
	
    УстановитьПривилегированныйРежим(Истина);
    
    // Извлекаем данные из хранилища
    ДанныеПакета = ДанныеОбмена.Получить();
    Если ДанныеПакета = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    // Читаем XML
    ЧтениеXML = Новый ЧтениеXML;
    ЧтениеXML.УстановитьСтроку(ДанныеПакета);
        
    // Создаем объект чтения сообщения
    ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
    Попытка
        ЧтениеСообщения.НачатьЧтение(ЧтениеXML);
    Исключение
        ЧтениеXML.Закрыть();
        Возврат;
    КонецПопытки;
    
    // Начинаем транзакцию
    НачатьТранзакцию();
    Попытка
        Пока ВозможностьЧтенияXML(ЧтениеXML) Цикл
            Данные = ПрочитатьXML(ЧтениеXML);
            
            Если НЕ Данные = Неопределено Тогда

                Данные.ОбменДанными.Отправитель = ЧтениеСообщения.Отправитель;
                Данные.ОбменДанными.Загрузка = Истина;
                
                Данные.Записать();
            КонецЕсли;
        КонецЦикла;

        // Завершаем чтение сообщения
        ЧтениеСообщения.ЗакончитьЧтение();        
        ЗафиксироватьТранзакцию();
    Исключение
        ОтменитьТранзакцию();
        Сообщить("Ошибка при обработке пакета: " + ОписаниеОшибки());
    КонецПопытки;
    
    ЧтениеXML.Закрыть();
    
КонецПроцедуры

// Функция определяет, принимать ли изменения для переданных данных от узла-отправителя
Функция ПринятьИзменения(Отправитель, Данные)Экспорт
	
	Прием = Истина;
	
	// Проверяем, зарегистрировано ли изменение для переданного узла
	Если ПланыОбмена.ИзменениеЗарегистрировано(Отправитель, Данные) Тогда
        // Если данные относятся к справочникам "Адреса", "Маршруты", "Пользователи" 
		//или документу "Поездка", изменения отклоняются (Прием = Ложь)
		Если ТипЗнч(Данные) = Тип("СправочникОбъект.Адреса") ИЛИ 
				ТипЗнч(Данные) = Тип("СправочникОбъект.Маршруты") ИЛИ
				ТипЗнч(Данные) = Тип("СправочникОбъект.Пользователи")ИЛИ
				ТипЗнч(Данные) = Тип("ДокументОбъект.Поездка") Тогда
			Прием = Ложь;
		КонецЕсли;

	КонецЕсли;     

	Возврат Прием;
	
КонецФункции

// Чтение последнего принятого сообщения из регистра сведений
Функция ПолучитьНомерОтправленного()
    Запись = РегистрыСведений.НастройкиСинхронизации.СоздатьМенеджерЗаписи();
    Запись.Ключ = "НомерОтправленного";
    Запись.Прочитать();
    Если Запись.Выбран() Тогда
        Возврат Запись.Значение.Получить();
    КонецЕсли;
    Возврат 0;
КонецФункции

// Чтение последнего полученного сообщения из регистра сведений
Функция ПолучитьНомерПринятого()
    Запись = РегистрыСведений.НастройкиСинхронизации.СоздатьМенеджерЗаписи();
    Запись.Ключ = "НомерПринятого";
    Запись.Прочитать();
    Если Запись.Выбран() Тогда
        Возврат Запись.Значение.Получить();
    КонецЕсли;
    Возврат 0;
КонецФункции

//Процедура сохраняет время последней синхронизации в регистр сведений "НастройкиСинхронизации"
Процедура СохранитьВремяСинхронизации(Время)
    Запись = РегистрыСведений.НастройкиСинхронизации.СоздатьМенеджерЗаписи();
    Запись.Ключ = "ВремяСинхронизации";
    Запись.Значение = Новый ХранилищеЗначения(Время);
    Запись.Записать();
КонецПроцедуры

// Процедура сохраняет номер отправленного сообщения в регистр сведений "НастройкиСинхронизации"
Процедура СохранитьНомерОтправленного(УзелОбмена, Номер) Экспорт
    // Создаем менеджер записи для регистра сведений "НастройкиСинхронизации"
    Запись = РегистрыСведений.НастройкиСинхронизации.СоздатьМенеджерЗаписи();
    
    // Устанавливаем ключ записи для сохранения номера отправленного сообщения
    Запись.Ключ = "НомерОтправленного";
    
    // Проверяем, есть ли измерение "Узел" в метаданных регистра сведений
    // Если измерение существует, устанавливаем его значение
    Если Метаданные.РегистрыСведений.НастройкиСинхронизации.Измерения.Найти("Узел") <> Неопределено Тогда
        Запись.Узел = УзелОбмена;
    КонецЕсли;
    
    // Читаем существующую запись из регистра, чтобы обновить её, если она существует
    Запись.Прочитать();
    
    // Сохраняем номер отправленного сообщения в поле "Значение" как хранилище значения
    Запись.Значение = Новый ХранилищеЗначения(Номер);
    
    // Записываем изменения в регистр сведений с заменой существующей записи (Истина)
    Запись.Записать(Истина);
КонецПроцедуры

// Процедура выполняет отправку изменений данных на сервер через веб-сервис для синхронизации
Процедура ОтправитьИзмененияНаСервер() Экспорт
	Попытка
		
		//URL веб-сервиса:
		//http://192.168.1.147/Progect1C-2/ws/ws1.1cws?wsdl
		//Пространство имен:
		//http://192.168.0.21/auth
		
		// Подключение к центральной базе данных
		АдресЦентральнойБазы = ПолучениеДанныхДляСоединения.ПолучитьURLЦентральнойБазы();
	
    	Попытка
        	WSОпределения = Новый WSОпределения(АдресЦентральнойБазы);
			WSПрокси = Новый WSПрокси(WSОпределения, ПолучениеДанныхДляСоединения.ПолучитьПроостранствоИмен(), "AuthService", "AuthServiceSoap");
		
    	Исключение
        	Сообщить("Ошибка подключения: " + ОписаниеОшибки() + АдресЦентральнойБазы);
		КонецПопытки;
		
		// Проверка узла обмена
        КодУзлаКлиента = ПолучитьКодНовогоУзлаПланаОбмена();;
        УзелОбменаКлиент = ПланыОбмена.Мобильные.НайтиПоКоду(КодУзлаКлиента);
        Если УзелОбменаКлиент.Пустая() Тогда
            Отказ = Истина;
            Возврат;
        КонецЕсли;
        
        // Узел сервера
        УзелОбменаСервер = ПланыОбмена.Мобильные.НайтиПоКоду(ПолучитьКодУзлаЦентральнойБазы());
        Если УзелОбменаСервер.Пустая() Тогда
            Отказ = Истина;
            Возврат;
		КонецЕсли;
		
		// Инициализация обмена
        НомерОтправленного = ПолучитьНомерОтправленного();
        НомерПринятого = ПолучитьНомерПринятого();
        НаименованиеУстройства = ПолучитьНазваниеУзлаУстройства();
        
        Попытка
            WSПрокси.НачатьОбмен(КодУзлаКлиента, НаименованиеУстройства, НомерОтправленного, НомерПринятого);
        Исключение
            Отказ = Истина;
            Возврат;
		КонецПопытки;
				
		// Формирование пакета обмена
        ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
        ЗаписьXML = Новый ЗаписьXML;
        ЗаписьXML.УстановитьСтроку("UTF-8");
        ЗаписьXML.ЗаписатьОбъявлениеXML();
        
        ЗаписьСообщения.НачатьЗапись(ЗаписьXML, УзелОбменаСервер);
        ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(УзелОбменаСервер, ЗаписьСообщения.НомерСообщения);
        
        Пока ВыборкаИзменений.Следующий() Цикл
            Данные = ВыборкаИзменений.Получить();
            ЗаписатьXML(ЗаписьXML, Данные);
        КонецЦикла;
        
        ЗаписьСообщения.ЗакончитьЗапись();
        СтрокаXML = ЗаписьXML.Закрыть();
		        
        // Создание пакета
        ПакетОбменаКлиента = Новый ХранилищеЗначения(СтрокаXML, Новый СжатиеДанных(9));
		
		// Отправка пакета на сервер
        Результат = WSПрокси.ВыполнитьИзменение(КодУзлаКлиента, ПакетОбменаКлиента);
		
		СохранитьНомерОтправленного(УзелОбменаСервер, ЗаписьСообщения.НомерСообщения);
        		
    Исключение
    КонецПопытки;
КонецПроцедуры
