// Обработчик нажатия кнопки "Начать поездку" (в форме документа)
&НаКлиенте
Процедура КнопкаНачатьПоездкуНажатие(Элемент)
	Если ПоездкаВБудущем(Объект.Ссылка) Тогда
		
		Сообщить("Время поездки еще не пришло");
		
	Иначе
		
    	НачатьПоездкуНаСервере(Объект.Ссылка);
    	// Перечитываем данные формы для обновления флажка
    	ЭтотОбъект.Прочитать();
    	ОбновитьОтображениеДанных();
    	Оповестить("ОбновитьТаблицуПоездок", Объект.Ссылка);

	КонецЕсли;

КонецПроцедуры

// Проверяет, является ли дата поездки будущей относительно текущей даты
&НаСервере
Функция ПоездкаВБудущем(Поездка)
    
    // Получаем текущую дату без времени
    ТекущаяДата = НачалоДня(ТекущаяДата());
    
    // Запрос для получения даты документа
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |	Поездка.ДатаПоездки КАК ДатаДокумента
        |ИЗ
        |	Документ.Поездка КАК Поездка
        |ГДЕ
        |	Поездка.Ссылка = &Поездка";
    Запрос.УстановитьПараметр("Поездка", Поездка);
    
    Результат = Запрос.Выполнить();
    
    // Проверяем, есть ли данные
    Если Результат.Пустой() Тогда
        Возврат Ложь; 
    КонецЕсли;
    
    Выборка = Результат.Выбрать();
    Выборка.Следующий();
    
    // Получаем дату документа без времени
    ДатаДокумента = НачалоДня(Выборка.ДатаДокумента);
    
    // Проверяем, заполнена ли дата
    Если Не ЗначениеЗаполнено(ДатаДокумента) Тогда
        Возврат Ложь; 
    КонецЕсли;
    
    // Сравниваем с текущей датой
    Если ДатаДокумента > ТекущаяДата Тогда
        Возврат Истина; 
    Иначе
        Возврат Ложь; // Поездка в прошлом или настоящем
    КонецЕсли;
    
КонецФункции

// Серверная процедура для изменения статуса документа
&НаСервере
Процедура НачатьПоездкуНаСервере(ПоездкаСсылка)
    // Получаем объект документа
    ДокументОбъект = ПоездкаСсылка.ПолучитьОбъект();
    Если ДокументОбъект = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    // Пытаемся заблокировать объект для предотвращения одновременного редактирования
    Попытка
        ДокументОбъект.Заблокировать();
    Исключение
        Возврат;
    КонецПопытки;
    
    // Принудительное перечитывание данных: получаем свежую версию объекта
    ДокументОбъект = ПоездкаСсылка.ПолучитьОбъект(); // Повторное получение для актуальности
    
    // Устанавливаем флаг начала поездки и текущее время
    ДокументОбъект.ПоездкаНачалась = Истина;    
    // Сохраняем документ с учетом возможных изменений
    Попытка
        ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
    Исключение
        Сообщить("Ошибка при начале поездки: " + ОписаниеОшибки());
    КонецПопытки;
    
    // Разблокируем объект
    ДокументОбъект.Разблокировать();
КонецПроцедуры

// Обработчик нажатия кнопки "Завершить поездку" (в форме документа)
&НаКлиенте
Процедура КнопкаЗавершитьПоездкуНажатие(Элемент)
    Если Не Объект.ПоездкаНачалась Тогда
        ПоказатьПредупреждение(, "Поездку можно завершить только если она началась.");
        Возврат;
    КонецЕсли;
    
    ЗавершитьПоездкуНаСервере(Объект.Ссылка);
    // Перечитываем данные формы для обновления флажка
    ЭтотОбъект.Прочитать();
    ОбновитьОтображениеДанных();
    Оповестить("ОбновитьТаблицуПоездок", Объект.Ссылка);
КонецПроцедуры

// Серверная процедура для изменения статуса документа на "Поездка завершена"
&НаСервере
Процедура ЗавершитьПоездкуНаСервере(ПоездкаСсылка)
    // Получаем объект документа
    ДокументОбъект = ПоездкаСсылка.ПолучитьОбъект();
    Если ДокументОбъект = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    // Пытаемся заблокировать объект для предотвращения одновременного редактирования
    Попытка
        ДокументОбъект.Заблокировать();
    Исключение
        Возврат;
    КонецПопытки;
    
    // Перечитываем данные объекта для актуальной версии
    ДокументОбъект = ПоездкаСсылка.ПолучитьОбъект();
    
    // Устанавливаем флаг завершения поездки и текущее время
    ДокументОбъект.ПоездкаЗавершена = Истина;    
    // Сохраняем документ
    Попытка
        ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
    Исключение
        Сообщить("Ошибка при завершении поездки: " + ОписаниеОшибки());
    КонецПопытки;
    
    // Разблокируем объект
    ДокументОбъект.Разблокировать();
КонецПроцедуры

// Обработчик закрытия формы
&НаКлиенте
Процедура ЗакрытьФормуТекущую(Команда)
	Закрыть();
КонецПроцедуры

// Обработчик события ПриСозданииНаСервере
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	#Если МобильноеПриложениеКлиент Тогда
       Элементы.ПоездкаНачалась.ТолькоПросмотр = Истина;
	   Элементы.ПоездкаЗавершена.ТолькоПросмотр = Истина;
    #КонецЕсли

КонецПроцедуры

// Обработчик события ПриОткрытии (для динамического обновления)
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если МобильноеПриложениеКлиент Тогда
       Элементы.ПоездкаНачалась.ТолькоПросмотр = Ложь;
	   Элементы.ПоездкаЗавершена.ТолькоПросмотр = Ложь;
    #КонецЕсли

КонецПроцедуры

// Проверка подключения к сети
&НаСервереБезКонтекста
Функция ДоступноПодключениеКИнтернету()
	Возврат СетевоеСоединение.ПроверитьСвязьССервером();
КонецФункции

// Показывает маршрут поездки полностью
&НаКлиенте
Процедура ПоказатьМаршрут(Команда)
	// Проверяем, что документ заполнен
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьПредупреждение(, "Сохраните документ поездки перед построением маршрута!");
		Возврат;
	КонецЕсли;
	
	// Проверяем интернет
	#Если МобильноеПриложениеКлиент Тогда
		Если НЕ ДоступноПодключениеКИнтернету() Тогда
			ПоказатьПредупреждение(, "Нет интернет соединения!");
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	Поездка = Объект.Ссылка;
	
	СинхронизироватьНажатие();
	
	#Если МобильноеПриложениеКлиент Тогда
		// Получаем данные маршрута
		ДанныеМаршрута = ПолучитьДанныеМаршрута(Поездка);
		Если ДанныеМаршрута = Неопределено ИЛИ ДанныеМаршрута.Количество() = 0 Тогда
			ПоказатьПредупреждение(, "Для выбранной поездки нет данных маршрута!");
			Возврат;
		КонецЕсли;
		
		// Формируем URL для Google Maps
		Результат = ОпределениеПоложения.СоздатьURLМаршрутаМеждуТочками(ДанныеМаршрута);
		URL = Результат.URL;
		Если НЕ ЗначениеЗаполнено(URL) Тогда
			ПоказатьПредупреждение(, "Не удалось построить маршрут: недостаточно точек!");
			Возврат;
		КонецЕсли;
				
		// Пробуем запустить Google Maps
		Запуск = Новый ЗапускПриложенияМобильногоУстройства("android.intent.action.VIEW", URL);
		Попытка
			Запуск.Запустить(Ложь);
		Исключение
			ПоказатьПредупреждение(, "Не удалось открыть Google Maps. Открываем в браузере...");
			Попытка
				ПерейтиПоНавигационнойСсылке(URL);
			Исключение
				ПоказатьПредупреждение(, "Ошибка открытия карты: " + ОписаниеОшибки());
			КонецПопытки;
		КонецПопытки;
	#Иначе
		// Для немобильных клиентов
		ДанныеМаршрута = ПолучитьДанныеМаршрута(Поездка);
		Если ДанныеМаршрута = Неопределено ИЛИ ДанныеМаршрута.Количество() = 0 Тогда
			ПоказатьПредупреждение(, "Для выбранной поездки нет данных маршрута!");
			Возврат;
		КонецЕсли;
		
		Результат = ОпределениеПоложения.СоздатьURLМаршрутаМеждуТочками(ДанныеМаршрута);
		URL = Результат.URL;
		Если НЕ ЗначениеЗаполнено(URL) Тогда
			ПоказатьПредупреждение(, "Не удалось построить маршрут: недостаточно точек!");
			Возврат;
		КонецЕсли;
				
		// Открываем URL в браузере
		Попытка
			ПерейтиПоНавигационнойСсылке(URL);
		Исключение
			ПоказатьПредупреждение(, "Ошибка открытия карты: " + ОписаниеОшибки());
		КонецПопытки;
	#КонецЕсли
КонецПроцедуры

// Функция получает данные маршрута для указанной поездки из табличной части документа "Поездка".
&НаСервереБезКонтекста
Функция ПолучитьДанныеМаршрута(Поездка)
    
    // Создаем новый объект запроса для выполнения SQL-подобного запроса к базе данных.
    Запрос = Новый Запрос;
    
    // Текст запроса к табличной части "МаршрутПоездки" документа "Поездка".
    // Выбираем адресные данные (страна, регион, город, улица, дом, индекс) и время точки маршрута.
    Запрос.Текст = 
    "ВЫБРАТЬ
    |	ПоездкаМаршрутПоездки.Адрес.Страна КАК Страна,
    |	ПоездкаМаршрутПоездки.Адрес.Регион КАК Регион,
    |	ПоездкаМаршрутПоездки.Адрес.Город КАК Город,
    |	ПоездкаМаршрутПоездки.Адрес.Улица КАК Улица,
    |	ПоездкаМаршрутПоездки.Адрес.Дом КАК Дом,
    |	ПоездкаМаршрутПоездки.Адрес.Индекс КАК Индекс,
    |	ПоездкаМаршрутПоездки.Время КАК Время
    |ИЗ
    |	Документ.Поездка.МаршрутПоездки КАК ПоездкаМаршрутПоездки
    |ГДЕ
    |	ПоездкаМаршрутПоездки.Ссылка = &Поездка
    |УПОРЯДОЧИТЬ ПО
    |	ПоездкаМаршрутПоездки.Время";
    
    // Устанавливаем параметр запроса "Поездка" для фильтрации данных по конкретному документу.
    Запрос.УстановитьПараметр("Поездка", Поездка);
    
    // Выполняем запрос и сохраняем результат.
    Результат = Запрос.Выполнить();
    
    // Проверяем, пустой ли результат запроса (нет строк в табличной части).
    Если Результат.Пустой() Тогда
        // Выводим сообщение об ошибке для отладки, указывая, что данные маршрута не найдены.
        Сообщить("Ошибка: Данные маршрута не найдены для поездки " + Поездка);
        // Возвращаем Неопределено, чтобы сигнализировать об отсутствии данных.
        Возврат Неопределено;
    КонецЕсли;
    
    // Создаем массив для хранения данных маршрута.
    ДанныеМаршрута = Новый Массив;
    
    // Получаем выборку из результата запроса для перебора строк.
    Выборка = Результат.Выбрать();
    
    // Перебираем строки выборки.
    Пока Выборка.Следующий() Цикл
        // Проверяем, заполнено ли поле "Город" (обязательное для адреса).
        Если НЕ ЗначениеЗаполнено(Выборка.Город) Тогда
            // Если город не заполнен, выводим сообщение и пропускаем эту точку маршрута.
            Сообщить("Пропущена точка маршрута: город не заполнен");
            Продолжить;
        КонецЕсли;
        
        // Создаем структуру для хранения данных одной точки маршрута.
        СтруктураАдреса = Новый Структура;
        // Заполняем структуру данными из выборки.
        СтруктураАдреса.Вставить("Страна", Выборка.Страна);
        СтруктураАдреса.Вставить("Регион", Выборка.Регион);
        СтруктураАдреса.Вставить("Город", Выборка.Город);
        СтруктураАдреса.Вставить("Улица", Выборка.Улица);
        СтруктураАдреса.Вставить("Дом", Выборка.Дом);
        СтруктураАдреса.Вставить("Индекс", Выборка.Индекс);
        СтруктураАдреса.Вставить("Время", Выборка.Время);
        
        // Добавляем структуру в массив данных маршрута.
        ДанныеМаршрута.Добавить(СтруктураАдреса);
    КонецЦикла;
    
    // Проверяем, содержит ли массив данные после обработки.
    Если ДанныеМаршрута.Количество() = 0 Тогда
        // Если массив пуст (например, все точки маршрута имели пустой город), выводим сообщение об ошибке.
        Сообщить("Ошибка: Нет валидных точек маршрута");
        // Возвращаем Неопределено, чтобы сигнализировать об отсутствии валидных данных.
        Возврат Неопределено;
    КонецЕсли;
    
    // Возвращаем массив с данными маршрута.
    Возврат ДанныеМаршрута;
КонецФункции

// Обработчик омена данными с сервером и мобильным приложением
Процедура СинхронизироватьНажатие()
    СинхронизацияМобильногоУстройства.СинхронизироватьДанныеНажатие();
КонецПроцедуры
