// Форма записти на поездку, представляет из себя список поездок, команды для 
// предварительного просмротра маршрута и записи на поездку

// Команда записаться на поездку, фиксирует все изменения
&НаКлиенте
Процедура ЗаписатьсяНаПоездку(Команда)
	
	// Обмен с сервером, для поддержки актуальностии данных
	СинхронизироватьНажатие();
	
	// Выбор тенкущего элемента
	ТекущиеДанные = Элементы.ДоступныеПоездки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, "Выберите поездку!");
		Возврат;
	КонецЕсли;
	
	// Передача параметров в форму ВыборОстановок
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Поездка", ТекущиеДанные.Поездка);
	ПараметрыФормы.Вставить("Пользователь", ТекущийПользователь);
	
	ОткрытьФорму("ОбщаяФорма.ВыборОстановок", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

// Переход на форму для просмотра расширенной информации текущей поездки
&НаКлиенте
Процедура РасширеннаяИнформация(Команда)
	ТекущаяСтрока = Элементы.ДоступныеПоездки.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru='Выберите поездку!'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Поездка", ТекущаяСтрока.Поездка);
	ПараметрыФормы.Вставить("ТекущийПользователь", ТекущийПользователь);
	
	ОткрытьФорму("ОбщаяФорма.РасширеннаяИнформацияПоездки", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

// Обработка создания формы на сервере
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("Пользователь") Тогда
        ТекущийПользователь = Параметры.Пользователь;
	КонецЕсли;
	
    // Установка текущей даты по умолчанию
    Если Не ЗначениеЗаполнено(ДатаВыбораЗначения) Тогда
       ДатаВыбораЗначения = НачалоДня(ТекущаяДатаСеанса());
    КонецЕсли;
   
    Элементы.ДатаВыбора.Видимость = Истина;


	// Заполнение таблицы доступных поездок
	ЗаполнитьДоступныеПоездки();
КонецПроцедуры

// Обработчик оповещения в главной форме
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
    Если ИмяСобытия = "ОбновитьТаблицуЗаписей" Тогда
        // Перечитываем данные и обновляем таблицу для текущего пользователя
        ЗаполнитьДоступныеПоездки();
	КонецЕсли;
	
КонецПроцедуры

// Запрос выдает данные с поездками, которые еще не прошли и имеют статус "Не началась"
&НаСервере
Процедура ЗаполнитьДоступныеПоездки()
	ДоступныеПоездки.Очистить();
	
	// Запрос к документу Поездка
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоездкаМаршрутПоездки.Ссылка КАК Ссылка,
		|	МИНИМУМ(ПоездкаМаршрутПоездки.Время) КАК МинВремя,
		|	МАКСИМУМ(ПоездкаМаршрутПоездки.Время) КАК МаксВремя
		|ПОМЕСТИТЬ ВременнаяТаблицаВремен
		|ИЗ
		|	Документ.Поездка.МаршрутПоездки КАК ПоездкаМаршрутПоездки
		|ГДЕ
		|	ПоездкаМаршрутПоездки.Ссылка.Проведен = ИСТИНА
		|	И ПоездкаМаршрутПоездки.Ссылка.ДатаПоездки >= &ДатаНачала
		|	И ПоездкаМаршрутПоездки.Ссылка.ДатаПоездки < &ДатаКонца
		|	И ПоездкаМаршрутПоездки.Ссылка.ПоездкаНачалась = ЛОЖЬ
		|СГРУППИРОВАТЬ ПО
		|	ПоездкаМаршрутПоездки.Ссылка
		|;
		|
		|ВЫБРАТЬ
		|	ПоездкаМаршрутПоездки.Ссылка КАК Ссылка,
		|	ПоездкаМаршрутПоездки.Адрес.Наименование КАК АдресНачала
		|ПОМЕСТИТЬ НачальныеАдреса
		|ИЗ
		|	Документ.Поездка.МаршрутПоездки КАК ПоездкаМаршрутПоездки
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаВремен КАК ВременнаяТаблицаВремен
		|	ПО ПоездкаМаршрутПоездки.Ссылка = ВременнаяТаблицаВремен.Ссылка
		|		И ПоездкаМаршрутПоездки.Время = ВременнаяТаблицаВремен.МинВремя
		|;
		|
		|ВЫБРАТЬ
		|	ПоездкаМаршрутПоездки.Ссылка КАК Ссылка,
		|	ПоездкаМаршрутПоездки.Адрес.Наименование КАК АдресОкончания
		|ПОМЕСТИТЬ КонечныеАдреса
		|ИЗ
		|	Документ.Поездка.МаршрутПоездки КАК ПоездкаМаршрутПоездки
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаВремен КАК ВременнаяТаблицаВремен
		|	ПО ПоездкаМаршрутПоездки.Ссылка = ВременнаяТаблицаВремен.Ссылка
		|		И ПоездкаМаршрутПоездки.Время = ВременнаяТаблицаВремен.МаксВремя
		|;
		|
		|ВЫБРАТЬ
		|	Поездка.Ссылка КАК Поездка,
		|	Поездка.ДатаПоездки КАК ДатаПоездки,
		|	ЕСТЬNULL(НачальныеАдреса.АдресНачала, """") КАК АдресНачала,
		|	ЕСТЬNULL(КонечныеАдреса.АдресОкончания, """") КАК АдресОкончания,
		|	Поездка.КоличествоМест КАК КоличествоМест,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПоездкаЗабронированныеМеста.Ссылка) КАК КоличествоЗанятыхМест
		|ИЗ
		|	Документ.Поездка КАК Поездка
		|	ЛЕВОЕ СОЕДИНЕНИЕ НачальныеАдреса КАК НачальныеАдреса
		|	ПО Поездка.Ссылка = НачальныеАдреса.Ссылка
		|	ЛЕВОЕ СОЕДИНЕНИЕ КонечныеАдреса КАК КонечныеАдреса
		|	ПО Поездка.Ссылка = КонечныеАдреса.Ссылка
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.Поездка.ЗабронированныеМеста КАК ПоездкаЗабронированныеМеста
		|	ПО Поездка.Ссылка = ПоездкаЗабронированныеМеста.Ссылка
		|		И ПоездкаЗабронированныеМеста.БроньОтменена = ЛОЖЬ
		|ГДЕ
		|	Поездка.Проведен = ИСТИНА
		|	И Поездка.ДатаПоездки >= &ДатаНачала
		|	И Поездка.ДатаПоездки < &ДатаКонца
		|	И Поездка.ПоездкаНачалась = ЛОЖЬ
		|СГРУППИРОВАТЬ ПО
		|	Поездка.Ссылка,
		|	Поездка.ДатаПоездки,
		|	Поездка.КоличествоМест,
		|	ЕСТЬNULL(НачальныеАдреса.АдресНачала, """"),
		|	ЕСТЬNULL(КонечныеАдреса.АдресОкончания, """")
		|ИМЕЮЩИЕ
		|	Поездка.КоличествоМест > КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПоездкаЗабронированныеМеста.Ссылка)";
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаВыбораЗначения));
	Запрос.УстановитьПараметр("ДатаКонца", КонецДня(ДатаВыбораЗначения));
	
	// Выполнение запроса и заполнение таблицы
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ДоступныеПоездки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
		Элементы.ДекорацияНетПоездок.Видимость = Ложь;
		Элементы.ДоступныеПоездки.Видимость = Истина;
	Иначе
		Элементы.ДекорацияНетПоездок.Видимость = Истина;
		Элементы.ДоступныеПоездки.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

// Обработчик изменения даты
&НаКлиенте
Процедура ДатаВыбораПриИзменении(Элемент)
	// Обновление таблицы при изменении даты
	ЗаполнитьДоступныеПоездки();
КонецПроцедуры

// Обработсчик обмена данными
Процедура СинхронизироватьНажатие()
    СинхронизацияМобильногоУстройства.СинхронизироватьДанныеНажатие();
КонецПроцедуры

// Проверка подключения к серверу
&НаСервереБезКонтекста
Функция ДоступноПодключениеКИнтернету()
	Возврат СетевоеСоединение.ПроверитьСвязьССервером();
КонецФункции

// Обработчик команды для отображения маршрута
&НаКлиенте
Процедура ПоказатьМаршрут(Команда)
	
	// Обмен данных с сервером
	СинхронизироватьНажатие();
	
	// Получение текущей строки
	ТекущаяСтрока = "";
	
	ТекущаяСтрока = Элементы.ДоступныеПоездки.ТекущиеДанные;
		
	Если ТекущаяСтрока = Неопределено Тогда
		ПоказатьПредупреждение(, "Выберите поездку в таблице!");
		Возврат;
	КонецЕсли;
	
	Если НЕ ДоступноПодключениеКИнтернету() Тогда
		ПоказатьПредупреждение(, "Нет интернет соединения!");
		Возврат;
	КонецЕсли;

	Поездка = ТекущаяСтрока.Поездка;
	
	#Если МобильноеПриложениеКлиент Тогда
		// Получаем данные маршрута
		ДанныеМаршрута = ПолучитьДанныеМаршрута(Поездка);
		Если ДанныеМаршрута = Неопределено ИЛИ ДанныеМаршрута.Количество() = 0 Тогда
			ПоказатьПредупреждение(, "Для выбранной поездки нет данных маршрута!");
			Возврат;
		КонецЕсли;
		
		// Формируем URL для Google Maps
		Результат = ОпределениеПоложения.СоздатьURLМаршрутаМеждуТочками(ДанныеМаршрута);
		URL = Результат.URL;
		Если НЕ ЗначениеЗаполнено(URL) Тогда
			ПоказатьПредупреждение(, "Не удалось построить маршрут: недостаточно точек!");
			Возврат;
		КонецЕсли;
				
		// Пробуем запустить Google Maps
		Запуск = Новый ЗапускПриложенияМобильногоУстройства("android.intent.action.VIEW", URL);
		Попытка
			Запуск.Запустить(Ложь);
		Исключение
			ПоказатьПредупреждение(, "Не удалось открыть Google Maps. Открываем в браузере...");
			Попытка
				ПерейтиПоНавигационнойСсылке(URL);
			Исключение
				ПоказатьПредупреждение(, "Ошибка открытия карты: " + ОписаниеОшибки());
			КонецПопытки;
		КонецПопытки;
	#Иначе
		// Для немобильных клиентов
		ДанныеМаршрута = ПолучитьДанныеМаршрута(Поездка);
		Если ДанныеМаршрута = Неопределено ИЛИ ДанныеМаршрута.Количество() = 0 Тогда
			ПоказатьПредупреждение(, "Для выбранной поездки нет данных маршрута!");
			Возврат;
		КонецЕсли;
		
		Результат = ОпределениеПоложения.СоздатьURLМаршрутаМеждуТочками(ДанныеМаршрута);
		URL = Результат.URL;
		Если НЕ ЗначениеЗаполнено(URL) Тогда
			ПоказатьПредупреждение(, "Не удалось построить маршрут: недостаточно точек!");
			Возврат;
		КонецЕсли;
				
		// Открываем URL в браузере
		Попытка
			ПерейтиПоНавигационнойСсылке(URL);
		Исключение
			ПоказатьПредупреждение(, "Ошибка открытия карты: " + ОписаниеОшибки());
		КонецПопытки;
	#КонецЕсли

КонецПроцедуры

// Функция получает данные маршрута для указанной поездки из табличной части документа "Поездка".
&НаСервереБезКонтекста
Функция ПолучитьДанныеМаршрута(Поездка)
    
    // Создаем новый объект запроса для выполнения SQL-подобного запроса к базе данных.
    Запрос = Новый Запрос;
    
    // Текст запроса к табличной части "МаршрутПоездки" документа "Поездка".
    // Выбираем адресные данные (страна, регион, город, улица, дом, индекс) и время точки маршрута.
    Запрос.Текст = 
    "ВЫБРАТЬ
    |	ПоездкаМаршрутПоездки.Адрес.Страна КАК Страна,
    |	ПоездкаМаршрутПоездки.Адрес.Регион КАК Регион,
    |	ПоездкаМаршрутПоездки.Адрес.Город КАК Город,
    |	ПоездкаМаршрутПоездки.Адрес.Улица КАК Улица,
    |	ПоездкаМаршрутПоездки.Адрес.Дом КАК Дом,
    |	ПоездкаМаршрутПоездки.Адрес.Индекс КАК Индекс,
    |	ПоездкаМаршрутПоездки.Время КАК Время
    |ИЗ
    |	Документ.Поездка.МаршрутПоездки КАК ПоездкаМаршрутПоездки
    |ГДЕ
    |	ПоездкаМаршрутПоездки.Ссылка = &Поездка
    |УПОРЯДОЧИТЬ ПО
    |	ПоездкаМаршрутПоездки.Время";
    
    // Устанавливаем параметр запроса "Поездка" для фильтрации данных по конкретному документу.
    Запрос.УстановитьПараметр("Поездка", Поездка);
    
    // Выполняем запрос и сохраняем результат.
    Результат = Запрос.Выполнить();
    
    // Проверяем, пустой ли результат запроса (нет строк в табличной части).
    Если Результат.Пустой() Тогда
        // Выводим сообщение об ошибке для отладки, указывая, что данные маршрута не найдены.
        Сообщить("Ошибка: Данные маршрута не найдены для поездки " + Поездка);
        // Возвращаем Неопределено, чтобы сигнализировать об отсутствии данных.
        Возврат Неопределено;
    КонецЕсли;
    
    // Создаем массив для хранения данных маршрута.
    ДанныеМаршрута = Новый Массив;
    
    // Получаем выборку из результата запроса для перебора строк.
    Выборка = Результат.Выбрать();
    
    // Перебираем строки выборки.
    Пока Выборка.Следующий() Цикл
        // Проверяем, заполнено ли поле "Город" (обязательное для адреса).
        Если НЕ ЗначениеЗаполнено(Выборка.Город) Тогда
            // Если город не заполнен, выводим сообщение и пропускаем эту точку маршрута.
            Сообщить("Пропущена точка маршрута: город не заполнен");
            Продолжить;
        КонецЕсли;
        
        // Создаем структуру для хранения данных одной точки маршрута.
        СтруктураАдреса = Новый Структура;
        // Заполняем структуру данными из выборки.
        СтруктураАдреса.Вставить("Страна", Выборка.Страна);
        СтруктураАдреса.Вставить("Регион", Выборка.Регион);
        СтруктураАдреса.Вставить("Город", Выборка.Город);
        СтруктураАдреса.Вставить("Улица", Выборка.Улица);
        СтруктураАдреса.Вставить("Дом", Выборка.Дом);
        СтруктураАдреса.Вставить("Индекс", Выборка.Индекс);
        СтруктураАдреса.Вставить("Время", Выборка.Время);
        
        // Добавляем структуру в массив данных маршрута.
        ДанныеМаршрута.Добавить(СтруктураАдреса);
    КонецЦикла;
    
    // Проверяем, содержит ли массив данные после обработки.
    Если ДанныеМаршрута.Количество() = 0 Тогда
        // Если массив пуст (например, все точки маршрута имели пустой город), выводим сообщение об ошибке.
        Сообщить("Ошибка: Нет валидных точек маршрута");
        // Возвращаем Неопределено, чтобы сигнализировать об отсутствии валидных данных.
        Возврат Неопределено;
    КонецЕсли;
    
    // Возвращаем массив с данными маршрута.
    Возврат ДанныеМаршрута;
КонецФункции
