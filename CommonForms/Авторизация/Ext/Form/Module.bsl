// Эта форма содержит элементы для прохождения аутентификации и идентификации
// Обработчик нажатия кнопки "Войти"
&НаКлиенте
Процедура Войти(Команда)
		
	// Проверяем входные параметры
	Если ПустаяСтрока(Логин) Тогда
		Сообщить("Введите логин!");
		Возврат;
	КонецЕсли;
	
   // Проверяем входные параметры
	Если ПустаяСтрока(Пароль) Тогда
		Сообщить("Введите пароль!");
		Возврат;
	КонецЕсли;
	
	// Определяем это мобильный или не мобильный клиент
	Если ОпределитьТипКлиента() Тогда
		// Процедуры аутентификации и идентификации на сервере
		Результат = СервисАвторизации.ПроверитьУчетныеДанныеАдминистратора(Логин, Пароль);
	
		Если Результат = "Вход успешен" Тогда
			Сообщить(Результат);
			СервисАвторизации.ПараметрАдминистратора(Истина);
			Закрыть();
		Иначе
			Сообщить(Результат);
		КонецЕсли;
	
	Иначе
		НачатьАутентификацию(Логин, Пароль);
		// Процедуры аутентификации и идентификации на мобильном клиенте	
	КонецЕсли;
			
КонецПроцедуры

// Обработчик проверки пароля и логина на сервере, если на сервере данные совпадают, то происходит
// перенос учетной записи на мобильное устройство
&НаКлиенте
Процедура НачатьАутентификацию(ЛогинВход, ПарольВход)
	
	Если ПустаяСтрока(ЛогинВход) ИЛИ ПустаяСтрока(ПарольВход) Тогда
        ПоказатьПредупреждение(, "Заполните поля логина и пароля!");
        Возврат;
    КонецЕсли;

    // Получение URL из константы
    URLИзКонстанты = ПолучитьURLЦентральнойБазы();

    // Формирование параметров для серверной процедуры
    КодУзла = Строка(Новый УникальныйИдентификатор());
    НаименованиеУстройства = "Устройство " + ЛогинВход;
	
	СинхронизироватьНажатие();
	
	Если ВыполнитьПроверкуСети() Тогда
		
		// Вызов серверной процедуры
    	Результат = ВыполнитьАвторизациюНаСервере(ЛогинВход, ПарольВход, URLИзКонстанты, КодУзла, НаименованиеУстройства);
		
    	Если НЕ Результат.Успех Тогда
        	ПоказатьПредупреждение(, "Неверный логин или пароль!");
        	Возврат;
		КонецЕсли;
		
		Закрыть();
		// Создаем структуру с параметрами
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Логин", ЛогинВход);
		ПараметрыФормы.Вставить("Пароль", ПарольВход);

		// Открываем форму с параметрами
		ОткрытьГлавнуюФорму(ПараметрыФормы);
    	// Успешный вход
    	ПоказатьПредупреждение(, "Вход успешен!");
		// Обеспечиваем доступ к справочникам и документам
		СервисАвторизации.ПараметрАдминистратора(Истина);

	Иначе
		
		Если ПроверкаНаУстройстве(ЛогинВход, ПарольВход) Тогда
			Закрыть();
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Логин", ЛогинВход);
			ПараметрыФормы.Вставить("Пароль", ПарольВход);

			// Открываем форму с параметрами
			ОткрытьГлавнуюФорму(ПараметрыФормы);

			ПоказатьПредупреждение(, "Вход успешен!");
			
			// Обеспечиваем доступ к справочникам и документам
			СервисАвторизации.ПараметрАдминистратора(Истина);
		Иначе 
			ПоказатьПредупреждение(, "Неверный логин или пароль!");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Получение URL из константы
&НаСервере
Функция ПолучитьURLЦентральнойБазы() Экспорт
	// Обращение к константе
    Возврат Константы.АдресЦентральнойБазы.Получить();
КонецФункции

// Возвращает пространтсво имен
&НаСервере
Функция ПолучитьПроостранствоИмен() Экспорт 
	Попытка
		// Обращение к константе
        Возврат Константы.ПространствоИменВебСервиса.Получить();
	Исключение
        Возврат "";
    КонецПопытки;
КонецФункции

// Обработка открытия главной формы
&НаКлиенте
Процедура ОткрытьГлавнуюФорму(ПараметрыФормы)
     ОткрытьФорму("ОбщаяФорма.ГлавнаяФорма", ПараметрыФормы);
КонецПроцедуры

// Проверка на устройстве, не был ли зарегистрирован этот пользователь
&НаСервере
Функция ПроверкаНаУстройстве(ЛогинВведенный, ПарольВведенный)
	// Перебор пользователей
    Выборка = Справочники.Пользователи.Выбрать();
	Пока Выборка.Следующий() Цикл
			
           Если Не ПустаяСтрока(Выборка.Логин) И Не ПустаяСтрока(Выборка.Пароль) Тогда
               // Проверка хэша логина
               Если СервисАвторизации.ПроверитьПароль(Выборка.Логин, ЛогинВведенный) Тогда
                   // Проверка хэша пароля
                   Если СервисАвторизации.ПроверитьПароль(Выборка.Пароль, ПарольВведенный) Тогда
                       
                       Возврат Истина;
                   КонецЕсли;
               КонецЕсли;
           КонецЕсли;
	КонецЦикла;
	   
	Возврат Ложь;   
	
КонецФункции

// Сохранение URL в константу
&НаСервере
Процедура СохранитьURLЦентральнойБазы(URL)
    Константы.АдресЦентральнойБазы.Установить(URL);
КонецПроцедуры

// Вызов серверной процедуры
&НаСервере
Функция ВыполнитьАвторизациюНаСервере(Логин, Пароль, URL, КодУзла, НаименованиеУстройства)
    Возврат СервисАвторизации.АвторизоватьПользователяНаСервере(Логин, Пароль, URL, КодУзла, НаименованиеУстройства);
КонецФункции

// Осуществление проверки доступности сервера
&НаСервере
Функция ВыполнитьПроверкуСети()
	Возврат СетевоеСоединение.ПроверитьСвязьССервером();
КонецФункции

// Получение адреса центральной базы при открытии формы
&НаКлиенте
Процедура ПриОткрытии(Отказ)
    АдресЦентральнойБазы = ПолучитьURLЦентральнойБазы();
КонецПроцедуры

// Отправка изменений на сервер
Процедура СинхронизироватьНажатие()
    СинхронизацияМобильногоУстройства.СинхронизироватьДанныеНажатие();
КонецПроцедуры

// Генерация случайной соли
Функция ПолучитьСлучайнуюСоль()
    Генератор = Новый ГенераторСлучайныхЧисел;
    Соль = "";
    Для Сч = 1 По 16 Цикл // 16 байт соли
        Соль = Соль + Символ(Генератор.СлучайноеЧисло(33, 126));
    КонецЦикла;
    Возврат Соль;
КонецФункции

// Обработчик перехода на форму регистрации
&НаКлиенте
Процедура Регистрация(Команда)
	ОткрытьФорму("ОбщаяФорма.Регистрация");
КонецПроцедуры

// Обработчик начала сканирования QR кода
&НаКлиенте
Процедура СканироватьQRКод(Команда)
	#Если МобильноеПриложениеКлиент Тогда
		// Проверяем поддержку сканирования
		Попытка
			СканированиеПоддерживается = СредстваМультимедиа.ПоддерживаетсяСканированиеШтрихКодов();
		Исключение
			ПоказатьПредупреждение(, "Сканирование не поддерживается! Проверьте конфигурацию.");
			Возврат;
		КонецПопытки;
		
		Если НЕ СканированиеПоддерживается Тогда

			ПоказатьПредупреждение(, "Сканирование штрихкодов не поддерживается!");
			Возврат;
		КонецЕсли;
		
		// Запускаем сканирование QR-кода
		Попытка
			ОбработчикСканирования = Новый ОписаниеОповещения("ОбработкаСканирования", ЭтотОбъект);
			ОбработчикЗакрытия = Новый ОписаниеОповещения("ОбработкаЗакрытияИнтерфейса", ЭтотОбъект);
			СредстваМультимедиа.ПоказатьСканированиеШтрихКодов(
				НСтр("ru='Наведите камеру на QR-код';en='Aim the camera at a QR code'"),
				ОбработчикСканирования,
				ОбработчикЗакрытия,
				ТипШтрихКода.QRCode
			);
		Исключение
			ПоказатьПредупреждение(, "Ошибка запуска сканера: " + ОписаниеОшибки());
		КонецПопытки;
	#Иначе
		ПоказатьПредупреждение(, "Сканирование QR-кода доступно только в мобильном приложении!");
	#КонецЕсли
КонецПроцедуры

// Обработчик результата сканирования QR-кода
&НаКлиенте
Процедура ОбработкаСканирования(Штрихкод, Результат, Сообщение, ДополнительныеПараметры) Экспорт
	#Если МобильноеПриложениеКлиент Тогда
		// Проверяем успешность сканирования
		Если НЕ Результат Тогда
			ТекстОшибки = НСтр("ru='Сканирование не удалось!'");
			ПоказатьПредупреждение(, ТекстОшибки);
			СредстваМультимедиа.ЗакрытьСканированиеШтрихКодов();
			Возврат;
		КонецЕсли;
		
		// Проверяем, что данные QR-кода не пустые
		ДанныеQR = Штрихкод;
		Если НЕ ЗначениеЗаполнено(ДанныеQR) Тогда
			ТекстОшибки = НСтр("ru='QR-код пустой!'");
			ПоказатьПредупреждение(, ТекстОшибки);
			СредстваМультимедиа.ЗакрытьСканированиеШтрихКодов();
			Возврат;
		КонецЕсли;
				
		// Парсим данные QR-кода (формат логин:пароль)
		Попытка
			Части = СтрРазделить(ДанныеQR, ":", Истина);
			Если Части.Количество() <> 2 Тогда
				ТекстОшибки = НСтр("ru='Неверный формат QR-кода! Ожидается логин:пароль.'");
				ПоказатьПредупреждение(, ТекстОшибки);
				СредстваМультимедиа.ЗакрытьСканированиеШтрихКодов();
				Возврат;
			КонецЕсли;
			
			ЛогинQR = Части[0];
			ПарольQR = Части[1];
			
			// Проверяем, что логин и пароль не пустые
			Если НЕ ЗначениеЗаполнено(ЛогинQR) ИЛИ НЕ ЗначениеЗаполнено(ПарольQR) Тогда
				ТекстОшибки = НСтр("ru='Логин или пароль пустые!'");
				ПоказатьПредупреждение(, ТекстОшибки);
				СредстваМультимедиа.ЗакрытьСканированиеШтрихКодов();
				Возврат;
			КонецЕсли;
									
			// Закрываем интерфейс сканирования
			СредстваМультимедиа.ЗакрытьСканированиеШтрихКодов();
			
			НачатьАутентификацию(ЛогинQR, ПарольQR);
		Исключение
			ТекстОшибки = НСтр("ru='Ошибка обработки QR-кода: '") + ОписаниеОшибки();
			ПоказатьПредупреждение(, ТекстОшибки);
			СредстваМультимедиа.ЗакрытьСканированиеШтрихКодов();
		КонецПопытки;
	#Иначе
		ТекстОшибки = НСтр("ru='Сканирование QR-кода доступно только в мобильном приложении!'");
		ПоказатьПредупреждение(, ТекстОшибки);
	#КонецЕсли
КонецПроцедуры

// Обработчик закрытия интерфейса сканирования
&НаКлиенте
Процедура ОбработкаЗакрытияИнтерфейса(ДополнительныеПараметры) Экспорт
	#Если НЕ МобильноеПриложениеКлиент Тогда
		ПоказатьПредупреждение(, "Сканирование QR-кода доступно только в мобильном приложении!");
	#КонецЕсли
КонецПроцедуры

// Обработчик создания формы на сервере
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Если не мобильный клиент, то команды сканирования QR кода и параметры веб сервиса для него не доступны
	Если ОпределитьТипКлиента() Тогда 
		
		Элементы.СканироватьQR.Видимость = Ложь;
		Элементы.ПараметрыВебСервиса.Видимость = Ложь;
		
	Иначе
		// Для мобильно клиента эти команды доступны
		Элементы.СканироватьQR.Видимость = Истина;
		Элементы.ПараметрыВебСервиса.Видимость = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция позволяет определять не мобильного клиента
&НаСервере
Функция ОпределитьТипКлиента()
	
	Если ПараметрыСеанса.ЭтоМобильныйКлиент Тогда 
		Возврат Ложь;
	Иначе 
		Возврат Истина;
	КонецЕсли;

КонецФункции

// Открвывает форму необходимая для работы Web-сервиса
&НаКлиенте
Процедура ОткрытьПанельСПАраметрами(Команда)
	// Открытие формы
	ОткрытьФорму("ОбщаяФорма.ЗадатьУзелАдресБазыДанных")	
КонецПроцедуры

