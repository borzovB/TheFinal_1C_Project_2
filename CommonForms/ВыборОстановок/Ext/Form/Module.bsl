// Форма отвечает за запись на поездку

// Создание формы на сервера
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Получение параметров
	Если Параметры.Свойство("Поездка") Тогда
		Поездка = Параметры.Поездка;
	Иначе
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("Пользователь") Тогда
		Пользователь = Параметры.Пользователь;
	Иначе
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Заполнение списков выбора
	ЗаполнитьСпискиВыбораОстановок();
КонецПроцедуры

// Заполнение списков выбора остановок
&НаСервере
Процедура ЗаполнитьСпискиВыбораОстановок()
	
	// Формирование запроса
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоездкаМаршрутПоездки.Адрес КАК Адрес,
		|	ПоездкаМаршрутПоездки.Время КАК Время
		|ИЗ
		|	Документ.Поездка.МаршрутПоездки КАК ПоездкаМаршрутПоездки
		|ГДЕ
		|	ПоездкаМаршрутПоездки.Ссылка = &Поездка
		|УПОРЯДОЧИТЬ ПО
		|	Время";
	
	Запрос.УстановитьПараметр("Поездка", Поездка);
	
	//Выполнение запроса
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Элементы.ОстановкаПосадки.СписокВыбора.Очистить();
	Элементы.ОстановкаВысадки.СписокВыбора.Очистить();
	
	Пока Выборка.Следующий() Цикл
		Элементы.ОстановкаПосадки.СписокВыбора.Добавить(Выборка.Адрес, Выборка.Адрес.Наименование);
		Элементы.ОстановкаВысадки.СписокВыбора.Добавить(Выборка.Адрес, Выборка.Адрес.Наименование);
	КонецЦикла;
КонецПроцедуры

// Команда Готово, записывает все изменения
&НаКлиенте
Процедура Готово(Команда)
	// Проверка необходимости установления начальной и конечной точки маршрута
	Если Не ЗначениеЗаполнено(ОстановкаПосадки) Или Не ЗначениеЗаполнено(ОстановкаВысадки) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Выберите остановки посадки и высадки!'"));
		Возврат;
	КонецЕсли;
	
	// Обмен данными между сервером и мобильным клиентом
	СинхронизироватьНажатие();
	
	// Проверка и запись на сервере
	Результат = ЗаписатьБроньНаСервере();
	Если Результат.Успех Тогда
		ПоказатьОповещениеПользователя(НСтр("ru='Запись выполнена!'"), , "Поездка: " + Строка(Поездка));
		Оповестить("ОбновитьДоступныеПоездки");
		Оповестить("ОбновитьТаблицуЗаписей");
		Закрыть();
	Иначе
		ПоказатьПредупреждение(, Результат.Сообщение);
	КонецЕсли;
КонецПроцедуры

// Обработчик обмена данными между сервером и мобильным клиентом
Процедура СинхронизироватьНажатие()
    СинхронизацияМобильногоУстройства.СинхронизироватьДанныеНажатие();
КонецПроцедуры

// Получение даты поездки на сервере
&НаСервере
Функция ПолучитьДатуПоездки()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Поездка.ДатаПоездки КАК ДатаПоездки
		|ИЗ
		|	Документ.Поездка КАК Поездка
		|ГДЕ
		|	Поездка.Ссылка = &Поездка";
	Запрос.УстановитьПараметр("Поездка", Поездка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.ДатаПоездки;
КонецФункции

// Запись брони на сервере
&НаСервере
Функция ЗаписатьБроньНаСервере()
	Результат = Новый Структура("Успех, Сообщение, ВремяНачала, ВремяОкончания", Ложь, "", Дата(1,1,1), Дата(1,1,1));
	
	// Проверка, что пользователь уже записан
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПоездкаЗабронированныеМеста.Ссылка
		|ИЗ
		|	Документ.Поездка.ЗабронированныеМеста КАК ПоездкаЗабронированныеМеста
		|ГДЕ
		|	ПоездкаЗабронированныеМеста.Ссылка = &Поездка
		|	И ПоездкаЗабронированныеМеста.Пассажир = &Пользователь
		|	И ПоездкаЗабронированныеМеста.БроньОтменена = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Поездка", Поездка);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Результат.Сообщение = НСтр("ru='Вы уже записаны на эту поездку!'");
		Возврат Результат;
	КонецЕсли;
	
	// Проверка даты поездки и количества мест
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Поездка.ДатаПоездки КАК ДатаПоездки,
		|	Поездка.КоличествоМест КАК КоличествоМест,
		|	Поездка.КоличествоЗанятыхМест КАК КоличествоЗанятыхМест
		|ИЗ
		|	Документ.Поездка КАК Поездка
		|ГДЕ
		|	Поездка.Ссылка = &Поездка";
	
	Запрос.УстановитьПараметр("Поездка", Поездка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Результат.Сообщение = НСтр("ru='Поездка не найдена!'");
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
		
	Если Выборка.ДатаПоездки < НачалоДня(ТекущаяДатаСеанса()) Тогда
		Результат.Сообщение = НСтр("ru='Дата поездки уже прошла!'");
		Возврат Результат;
	КонецЕсли;
	
	// Проверка наличия свободных мест
	Если Выборка.КоличествоЗанятыхМест >= Выборка.КоличествоМест Тогда
		Результат.Сообщение = НСтр("ru='Нет свободных мест!'");
		Возврат Результат;
	КонецЕсли;
	
	// Проверка порядка остановок и получение времени
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоездкаМаршрутПоездки.Адрес КАК Адрес,
		|	ПоездкаМаршрутПоездки.Время КАК Время
		|ИЗ
		|	Документ.Поездка.МаршрутПоездки КАК ПоездкаМаршрутПоездки
		|ГДЕ
		|	ПоездкаМаршрутПоездки.Ссылка = &Поездка
		|	И ПоездкаМаршрутПоездки.Адрес В (&ОстановкаПосадки, &ОстановкаВысадки)";
	
	Запрос.УстановитьПараметр("Поездка", Поездка);
	Запрос.УстановитьПараметр("ОстановкаПосадки", ОстановкаПосадки);
	Запрос.УстановитьПараметр("ОстановкаВысадки", ОстановкаВысадки);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ВремяПосадки = Дата(1,1,1);
	ВремяВысадки = Дата(1,1,1);
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Адрес = ОстановкаПосадки Тогда
			ВремяПосадки = Выборка.Время;
		ИначеЕсли Выборка.Адрес = ОстановкаВысадки Тогда
			ВремяВысадки = Выборка.Время;
		КонецЕсли;
	КонецЦикла;
	
	Если ВремяПосадки >= ВремяВысадки Тогда
		Результат.Сообщение = НСтр("ru='Остановка посадки не может быть позже или одновременно с остановкой высадки!'");
		Возврат Результат;
	КонецЕсли;
	
	// Сохранение времени для календаря
	Результат.ВремяНачала = ВремяПосадки;
	Результат.ВремяОкончания = ВремяВысадки;
	
	// Запись в ЗабронированныеМеста и обновление КоличествоЗанятыхМест
	НачатьТранзакцию();
	Попытка
		// Блокировка документа
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.Поездка");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Поездка);
		Блокировка.Заблокировать();
		
		Док = Поездка.ПолучитьОбъект();
		НоваяБронь = Док.ЗабронированныеМеста.Добавить();
		НоваяБронь.Пассажир = Пользователь;
		НоваяБронь.ОстановкаПосадки = ОстановкаПосадки;
		НоваяБронь.ОстановкаВысадки = ОстановкаВысадки;
		НоваяБронь.БроньОтменена = Ложь;
		
		// Увеличение количества занятых мест
		Док.КоличествоЗанятыхМест = Док.КоличествоЗанятыхМест + 1;
		
		Док.Записать(РежимЗаписиДокумента.Проведение);
		ЗафиксироватьТранзакцию();
		
		Результат.Успех = Истина;
	Исключение
		ОтменитьТранзакцию();
		Результат.Сообщение = НСтр("ru='Ошибка записи: '") + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

// Проверка связи с сервером
&НаСервереБезКонтекста
Функция ДоступноПодключениеКИнтернету()
	Возврат СетевоеСоединение.ПроверитьСвязьССервером();
КонецФункции

// Команда ПоказатьМаршрутДоБрони
&НаКлиенте
Процедура ПоказатьМаршрутДоБрони(Команда)
	
	// Проверка заполнения остановок
	Если Не ЗначениеЗаполнено(ОстановкаПосадки) Или Не ЗначениеЗаполнено(ОстановкаВысадки) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Выберите остановки посадки и высадки!'"));
		Возврат;
	КонецЕсли;
	
	// Проверка порядка остановок
	РезультатПроверки = ПроверитьПорядокОстановок(ОстановкаПосадки, ОстановкаВысадки, Поездка);
	Если Не РезультатПроверки.Успех Тогда
		ПоказатьПредупреждение(, РезультатПроверки.Сообщение);
		Возврат;
	КонецЕсли;
	
	Если НЕ ДоступноПодключениеКИнтернету() Тогда
		ПоказатьПредупреждение(, НСтр("ru='Нет интернет соединения!'"));
		Возврат;
	КонецЕсли;
	
	#Если МобильноеПриложениеКлиент Тогда
		// Получаем данные маршрута
		ДанныеМаршрута = СобратьДанныеМаршрута(Поездка, ОстановкаПосадки, ОстановкаВысадки);
		
		Если ДанныеМаршрута = Неопределено ИЛИ ДанныеМаршрута.Количество() < 2 Тогда
			ПоказатьПредупреждение(, НСтр("ru='Для выбранной поездки нет данных маршрута!'"));
			Возврат;
		КонецЕсли;
		
		// Формируем URL и начальный адрес для Google Maps
		РезультатURL = ОпределениеПоложения.СоздатьURLМаршрутаМеждуТочками(ДанныеМаршрута);
		URL = РезультатURL.URL;
		НачальныйАдрес = РезультатURL.Начало;
		
		Если НЕ ЗначениеЗаполнено(URL) Тогда
			ПоказатьПредупреждение(, НСтр("ru='Не удалось построить маршрут: недостаточно точек!'"));
			Возврат;
		КонецЕсли;
		
		// Запускаем приложение карт
		Запуск = Новый ЗапускПриложенияМобильногоУстройства("android.intent.action.VIEW", URL);
		Попытка
			Запуск.Запустить(Ложь);
		Исключение
			ПоказатьПредупреждение(, НСтр("ru='Ошибка запуска Google Maps: '") + ОписаниеОшибки());
			// Альтернативный запуск через geo:
			Попытка
				АльтернативныйURL = "geo:0,0?q=" + НачальныйАдрес;
				Запуск = Новый ЗапускПриложенияМобильногоУстройства("android.intent.action.VIEW", АльтернативныйURL);
				Запуск.Запустить(Ложь);
				ПоказатьПредупреждение(, НСтр("ru='Запущен альтернативный geo URL: '") + АльтернативныйURL);
			Исключение
				ПоказатьПредупреждение(, НСтр("ru='Ошибка запуска карты: '") + ОписаниеОшибки());
			КонецПопытки;
		КонецПопытки;
	#КонецЕсли
КонецПроцедуры

// Проверка порядка остановок
//Позволяет проверить правильность выбора порядка остановок маршрута пользователя
&НаСервере
Функция ПроверитьПорядокОстановок(ОстановкаПосадки, ОстановкаВысадки, Поездка)
	Результат = Новый Структура("Успех, Сообщение", Ложь, "");
	
	// Создание запроса
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоездкаМаршрутПоездки.Адрес КАК Адрес,
		|	ПоездкаМаршрутПоездки.Время КАК Время
		|ИЗ
		|	Документ.Поездка.МаршрутПоездки КАК ПоездкаМаршрутПоездки
		|ГДЕ
		|	ПоездкаМаршрутПоездки.Ссылка = &Поездка
		|	И ПоездкаМаршрутПоездки.Адрес В (&ОстановкаПосадки, &ОстановкаВысадки)";
	
	Запрос.УстановитьПараметр("Поездка", Поездка);
	Запрос.УстановитьПараметр("ОстановкаПосадки", ОстановкаПосадки);
	Запрос.УстановитьПараметр("ОстановкаВысадки", ОстановкаВысадки);
	
	// Выполнение запроса
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ВремяПосадки = Дата(1,1,1);
	ВремяВысадки = Дата(1,1,1);
	
	// Выбор данных, адреса остановки посадки и высадки, между котлорыми будет проходить маршрут
	Пока Выборка.Следующий() Цикл
		Если Выборка.Адрес = ОстановкаПосадки Тогда
			ВремяПосадки = Выборка.Время;
		ИначеЕсли Выборка.Адрес = ОстановкаВысадки Тогда
			ВремяВысадки = Выборка.Время;
		КонецЕсли;
	КонецЦикла;
	
	//Время у адресов посадки и прибытия не должны совпадать
 	Если ВремяПосадки = Дата(1,1,1) Или ВремяВысадки = Дата(1,1,1) Тогда
		Результат.Сообщение = НСтр("ru='Остановки не найдены в маршруте поездки!'");
		Возврат Результат;
	КонецЕсли;
	
	// Результат определяется из времени если время посадки больше времени высадки, то тогда
	//возвращается ложь
	Если ВремяПосадки >= ВремяВысадки Тогда
		Результат.Сообщение = НСтр("ru='Остановка посадки не может быть позже или одновременно с остановкой высадки!'");
		Возврат Результат;
	КонецЕсли;
	
	Результат.Успех = Истина;
	Возврат Результат;
КонецФункции

// Функция сбора данных маршрута
&НаСервереБезКонтекста
Функция СобратьДанныеМаршрута(Поездка, ОстановкаПосадки = Неопределено, ОстановкаВысадки = Неопределено, ТекущийПользователь = Неопределено)
	// Запрос для получения маршрута
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоездкаМаршрутПоездки.Адрес КАК Адрес,
		|	ПоездкаМаршрутПоездки.Время КАК Время,
		|	ПоездкаМаршрутПоездки.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	Документ.Поездка.МаршрутПоездки КАК ПоездкаМаршрутПоездки
		|ГДЕ
		|	ПоездкаМаршрутПоездки.Ссылка = &Поездка";
	
	Запрос.УстановитьПараметр("Поездка", Поездка);
	
	// Если переданы ОстановкаПосадки и ОстановкаВысадки, используем их напрямую
	Если ОстановкаПосадки <> Неопределено И ОстановкаВысадки <> Неопределено Тогда
		// Предварительный просмотр
	Иначе
		// Обычный маршрут из брони
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПоездкаЗабронированныеМеста.ОстановкаПосадки КАК ОстановкаПосадки,
			|	ПоездкаЗабронированныеМеста.ОстановкаВысадки КАК ОстановкаВысадки
			|ПОМЕСТИТЬ Бронь
			|ИЗ
			|	Документ.Поездка.ЗабронированныеМеста КАК ПоездкаЗабронированныеМеста
			|ГДЕ
			|	ПоездкаЗабронированныеМеста.Ссылка = &Поездка
			|	И ПоездкаЗабронированныеМеста.Пассажир = &ТекущийПользователь
			|	И ПоездкаЗабронированныеМеста.БроньОтменена = ЛОЖЬ
			|;
			|
			|ВЫБРАТЬ
			|	ПоездкаМаршрутПоездки.Адрес КАК Адрес,
			|	ПоездкаМаршрутПоездки.Время КАК Время,
			|	ПоездкаМаршрутПоездки.НомерСтроки КАК НомерСтроки,
			|	ВЫБОР
			|		КОГДА ПоездкаМаршрутПоездки.Адрес = Бронь.ОстановкаПосадки
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЭтоПосадка,
			|	ВЫБОР
			|		КОГДА ПоездкаМаршрутПоездки.Адрес = Бронь.ОстановкаВысадки
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЭтоВысадка
			|ИЗ
			|	Документ.Поездка.МаршрутПоездки КАК ПоездкаМаршрутПоездки
			|		ЛЕВОЕ СОЕДИНЕНИЕ Бронь КАК Бронь
			|		ПО ИСТИНА
			|ГДЕ
			|	ПоездкаМаршрутПоездки.Ссылка = &Поездка";
		Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Формируем массив адресов
	ДанныеМаршрута = Новый Массив;
	Выборка = Результат.Выбрать();
	
	ВремяПосадки = Дата(1,1,1);
	ВключатьТочки = Ложь;
	
	// Определяем остановки
	Если ОстановкаПосадки <> Неопределено И ОстановкаВысадки <> Неопределено Тогда
		// Для предварительного просмотра
		ВремяПосадкиНайдено = Ложь;
		Пока Выборка.Следующий() Цикл
			Если Выборка.Адрес = ОстановкаПосадки Тогда
				ВремяПосадки = Выборка.Время;
				ВремяПосадкиНайдено = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ВремяПосадкиНайдено Тогда
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		// Для брони
		Пока Выборка.Следующий() Цикл
			Если Выборка.ЭтоПосадка Тогда
				ВремяПосадки = Выборка.Время;
				ОстановкаПосадки = Выборка.Адрес;
			КонецЕсли;
			Если Выборка.ЭтоВысадка Тогда
				ОстановкаВысадки = Выборка.Адрес;
			КонецЕсли;
		КонецЦикла;
		
		// Проверка наличия брони
		Если ОстановкаПосадки = Неопределено ИЛИ ОстановкаВысадки = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	// Формируем маршрут
	Выборка.Сбросить();
	Пока Выборка.Следующий() Цикл
		// Начинаем с остановки посадки
		Если Выборка.Адрес = ОстановкаПосадки Тогда
			ВключатьТочки = Истина;
			СтруктураАдреса = ИзвлечьСтруктуруАдреса(Выборка.Адрес);
			Если СтруктураАдреса = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ДанныеМаршрута.Добавить(СтруктураАдреса);
		// Промежуточные точки
		ИначеЕсли ВключатьТочки И Выборка.Время > ВремяПосадки И Выборка.Адрес <> ОстановкаВысадки Тогда
			СтруктураАдреса = ИзвлечьСтруктуруАдреса(Выборка.Адрес);
			Если СтруктураАдреса = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ДанныеМаршрута.Добавить(СтруктураАдреса);

		// Остановка высадки
		ИначеЕсли Выборка.Адрес = ОстановкаВысадки Тогда
			СтруктураАдреса = ИзвлечьСтруктуруАдреса(Выборка.Адрес);
			Если СтруктураАдреса = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ДанныеМаршрута.Добавить(СтруктураАдреса);

			ВключатьТочки = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	// Проверка маршрута
	Если ДанныеМаршрута.Количество() < 2 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДанныеМаршрута;
КонецФункции

// Функция извлечения структуры адреса
&НаСервереБезКонтекста
Функция ИзвлечьСтруктуруАдреса(АдресСсылка)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Адреса.Страна,
		|	Адреса.Регион,
		|	Адреса.Город,
		|	Адреса.Улица,
		|	Адреса.Дом,
		|	Адреса.Индекс
		|ИЗ
		|	Справочник.Адреса КАК Адреса
		|ГДЕ
		|	Адреса.Ссылка = &Адрес";
	
	Запрос.УстановитьПараметр("Адрес", АдресСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Проверяем обязательность поля Город
	Если НЕ ЗначениеЗаполнено(Выборка.Город) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураАдреса = Новый Структура;
	СтруктураАдреса.Вставить("Страна", ?(ЗначениеЗаполнено(Выборка.Страна), Выборка.Страна, ""));
	СтруктураАдреса.Вставить("Регион", ?(ЗначениеЗаполнено(Выборка.Регион), Выборка.Регион, ""));
	СтруктураАдреса.Вставить("Город", Выборка.Город);
	СтруктураАдреса.Вставить("Улица", ?(ЗначениеЗаполнено(Выборка.Улица), Выборка.Улица, ""));
	СтруктураАдреса.Вставить("Дом", ?(ЗначениеЗаполнено(Выборка.Дом), Выборка.Дом, ""));
	СтруктураАдреса.Вставить("Индекс", ?(ЗначениеЗаполнено(Выборка.Индекс), Выборка.Индекс, ""));
	
	Возврат СтруктураАдреса;
КонецФункции
