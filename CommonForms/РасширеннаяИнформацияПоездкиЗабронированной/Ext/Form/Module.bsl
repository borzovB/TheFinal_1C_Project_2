
// Форма для прросмотра рассширенной информации поездки

// Отображение маршрута данной поездки полностью от начала и до конца
&НаКлиенте
Процедура ПоказатьМаршрут(Команда)
	
	СинхронизироватьНажатие();
		
	#Если МобильноеПриложениеКлиент Тогда
		// Получаем данные маршрута
		ДанныеМаршрута = ПолучитьДанныеМаршрута(Поездка);
		Если ДанныеМаршрута = Неопределено ИЛИ ДанныеМаршрута.Количество() = 0 Тогда
			ПоказатьПредупреждение(, "Для выбранной поездки нет данных маршрута!");
			Возврат;
		КонецЕсли;
		
		// Формируем URL для Google Maps
		Результат = ОпределениеПоложения.СоздатьURLМаршрутаМеждуТочками(ДанныеМаршрута);
		URL = Результат.URL;
		Если НЕ ЗначениеЗаполнено(URL) Тогда
			ПоказатьПредупреждение(, "Не удалось построить маршрут: недостаточно точек!");
			Возврат;
		КонецЕсли;
				
		// Пробуем запустить Google Maps
		Запуск = Новый ЗапускПриложенияМобильногоУстройства("android.intent.action.VIEW", URL);
		Попытка
			Запуск.Запустить(Ложь);
		Исключение
			ПоказатьПредупреждение(, "Не удалось открыть Google Maps. Открываем в браузере...");
			Попытка
				ПерейтиПоНавигационнойСсылке(URL);
			Исключение
				ПоказатьПредупреждение(, "Ошибка открытия карты: " + ОписаниеОшибки());
			КонецПопытки;
		КонецПопытки;
	#Иначе
		// Для немобильных клиентов
		ДанныеМаршрута = ПолучитьДанныеМаршрута(Поездка);
		Если ДанныеМаршрута = Неопределено ИЛИ ДанныеМаршрута.Количество() = 0 Тогда
			ПоказатьПредупреждение(, "Для выбранной поездки нет данных маршрута!");
			Возврат;
		КонецЕсли;
		
		Результат = ОпределениеПоложения.СоздатьURLМаршрутаМеждуТочками(ДанныеМаршрута);
		URL = Результат.URL;
		Если НЕ ЗначениеЗаполнено(URL) Тогда
			ПоказатьПредупреждение(, "Не удалось построить маршрут: недостаточно точек!");
			Возврат;
		КонецЕсли;
				
		// Открываем URL в браузере
		Попытка
			ПерейтиПоНавигационнойСсылке(URL);
		Исключение
			ПоказатьПредупреждение(, "Ошибка открытия карты: " + ОписаниеОшибки());
		КонецПопытки;
	#КонецЕсли
КонецПроцедуры

// Функция получает данные маршрута для указанной поездки из табличной части документа "Поездка".
&НаСервереБезКонтекста
Функция ПолучитьДанныеМаршрута(Поездка)
    
    // Создаем новый объект запроса для выполнения SQL-подобного запроса к базе данных.
    Запрос = Новый Запрос;
    
    // Текст запроса к табличной части "МаршрутПоездки" документа "Поездка".
    // Выбираем адресные данные (страна, регион, город, улица, дом, индекс) и время точки маршрута.
    Запрос.Текст = 
    "ВЫБРАТЬ
    |	ПоездкаМаршрутПоездки.Адрес.Страна КАК Страна,
    |	ПоездкаМаршрутПоездки.Адрес.Регион КАК Регион,
    |	ПоездкаМаршрутПоездки.Адрес.Город КАК Город,
    |	ПоездкаМаршрутПоездки.Адрес.Улица КАК Улица,
    |	ПоездкаМаршрутПоездки.Адрес.Дом КАК Дом,
    |	ПоездкаМаршрутПоездки.Адрес.Индекс КАК Индекс,
    |	ПоездкаМаршрутПоездки.Время КАК Время
    |ИЗ
    |	Документ.Поездка.МаршрутПоездки КАК ПоездкаМаршрутПоездки
    |ГДЕ
    |	ПоездкаМаршрутПоездки.Ссылка = &Поездка
    |УПОРЯДОЧИТЬ ПО
    |	ПоездкаМаршрутПоездки.Время";
    
    // Устанавливаем параметр запроса "Поездка" для фильтрации данных по конкретному документу.
    Запрос.УстановитьПараметр("Поездка", Поездка);
    
    // Выполняем запрос и сохраняем результат.
    Результат = Запрос.Выполнить();
    
    // Проверяем, пустой ли результат запроса (нет строк в табличной части).
    Если Результат.Пустой() Тогда
        // Выводим сообщение об ошибке для отладки, указывая, что данные маршрута не найдены.
        Сообщить("Ошибка: Данные маршрута не найдены для поездки " + Поездка);
        // Возвращаем Неопределено, чтобы сигнализировать об отсутствии данных.
        Возврат Неопределено;
    КонецЕсли;
    
    // Создаем массив для хранения данных маршрута.
    ДанныеМаршрута = Новый Массив;
    
    // Получаем выборку из результата запроса для перебора строк.
    Выборка = Результат.Выбрать();
    
    // Перебираем строки выборки.
    Пока Выборка.Следующий() Цикл
        // Проверяем, заполнено ли поле "Город" (обязательное для адреса).
        Если НЕ ЗначениеЗаполнено(Выборка.Город) Тогда
            // Если город не заполнен, выводим сообщение и пропускаем эту точку маршрута.
            Сообщить("Пропущена точка маршрута: город не заполнен");
            Продолжить;
        КонецЕсли;
        
        // Создаем структуру для хранения данных одной точки маршрута.
        СтруктураАдреса = Новый Структура;
        // Заполняем структуру данными из выборки.
        СтруктураАдреса.Вставить("Страна", Выборка.Страна);
        СтруктураАдреса.Вставить("Регион", Выборка.Регион);
        СтруктураАдреса.Вставить("Город", Выборка.Город);
        СтруктураАдреса.Вставить("Улица", Выборка.Улица);
        СтруктураАдреса.Вставить("Дом", Выборка.Дом);
        СтруктураАдреса.Вставить("Индекс", Выборка.Индекс);
        СтруктураАдреса.Вставить("Время", Выборка.Время);
        
        // Добавляем структуру в массив данных маршрута.
        ДанныеМаршрута.Добавить(СтруктураАдреса);
    КонецЦикла;
    
    // Проверяем, содержит ли массив данные после обработки.
    Если ДанныеМаршрута.Количество() = 0 Тогда
        // Если массив пуст (например, все точки маршрута имели пустой город), выводим сообщение об ошибке.
        Сообщить("Ошибка: Нет валидных точек маршрута");
        // Возвращаем Неопределено, чтобы сигнализировать об отсутствии валидных данных.
        Возврат Неопределено;
    КонецЕсли;
    
    // Возвращаем массив с данными маршрута.
    Возврат ДанныеМаршрута;
КонецФункции

// Команда для показа маршрута от текущего местоположения до выбранного адреса
&НаКлиенте
Процедура ПоказатьМаршрутДоОстановки(Команда)
	
	СинхронизироватьНажатие();
	
	#Если МобильноеПриложениеКлиент Тогда
		// Получаем текущую строку с адресом
		ТекущаяСтрока = Элементы.МаршрутПоездки.ТекущиеДанные;
		Если ТекущаяСтрока = Неопределено Тогда
			ПоказатьПредупреждение(, "Выберите адрес для построения маршрута!");
			Возврат;
		КонецЕсли;
		
		// Получаем данные адреса
		ДанныеАдреса = ПолучитьДанныеАдреса(ТекущаяСтрока.Адрес);
		Если ДанныеАдреса = Неопределено Тогда
			ПоказатьПредупреждение(, "Не удалось получить данные адреса!");
			Возврат;
		КонецЕсли;
		
		// Получаем текущее местоположение устройства
		ТекущееМестоположение = ОпределениеПоложения.ПолучитьТекущееМестоположение();
		Если ТекущееМестоположение = Неопределено Тогда
			ПоказатьПредупреждение(, "Не удалось определить текущее местоположение!");
			Возврат;
		КонецЕсли;
		
		// Формируем URL для Google Maps
		URL = ОпределениеПоложения.СоздатьURLМаршрутаДоТочки(ДанныеАдреса, ТекущееМестоположение);
		Если НЕ ЗначениеЗаполнено(URL) Тогда
			ПоказатьПредупреждение(, "Не удалось построить маршрут!");
			Возврат;
		КонецЕсли;
				
		// Запускаем приложение карт
		Запуск = Новый ЗапускПриложенияМобильногоУстройства("android.intent.action.VIEW", URL);
		Попытка
			Запуск.Запустить(Ложь);
		Исключение
			ПоказатьПредупреждение(, "Ошибка запуска приложения карт: " + ОписаниеОшибки());
		КонецПопытки;
	#Иначе
		// Для немобильных клиентов показываем маршрут без местоположения
		ТекущаяСтрока = Элементы.МаршрутПоездки.ТекущиеДанные;
		Если ТекущаяСтрока = Неопределено Тогда
			ПоказатьПредупреждение(, "Выберите адрес для построения маршрута!");
			Возврат;
		КонецЕсли;
		
		ДанныеАдреса = ПолучитьДанныеАдреса(ТекущаяСтрока.Адрес);
		Если ДанныеАдреса = Неопределено Тогда
			ПоказатьПредупреждение(, "Не удалось получить данные адреса!");
			Возврат;
		КонецЕсли;
		
		URL = ОпределениеПоложения.СоздатьURLМаршрутаДоТочки(ДанныеАдреса);
		Если НЕ ЗначениеЗаполнено(URL) Тогда
			ПоказатьПредупреждение(, "Не удалось построить маршрут!");
			Возврат;
		КонецЕсли;
				
		// Открываем URL в браузере
		Попытка
			ПерейтиПоНавигационнойСсылке(URL);
		Исключение
			ПоказатьПредупреждение(, "Ошибка открытия карты: " + ОписаниеОшибки());
		КонецПопытки;
	#КонецЕсли
	
КонецПроцедуры

// Проверка подключения к интернету
&НаСервереБезКонтекста
Функция ПроверитьИнтернетСоединение()
	Возврат СетевоеСоединение.ПроверитьСвязьССервером();
КонецФункции

// Получение данных адреса из справочника Адреса
&НаСервереБезКонтекста
Функция ПолучитьДанныеАдреса(АдресСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Адреса.Страна КАК Страна,
	|	Адреса.Регион КАК Регион,
	|	Адреса.Город КАК Город,
	|	Адреса.Улица КАК Улица,
	|	Адреса.Дом КАК Дом,
	|	Адреса.Индекс КАК Индекс
	|ИЗ
	|	Справочник.Адреса КАК Адреса
	|ГДЕ
	|	Адреса.Ссылка = &АдресСсылка";
	
	Запрос.УстановитьПараметр("АдресСсылка", АдресСсылка);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Если НЕ ЗначениеЗаполнено(Выборка.Город) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураАдреса = Новый Структура;
	СтруктураАдреса.Вставить("Страна", Выборка.Страна);
	СтруктураАдреса.Вставить("Регион", Выборка.Регион);
	СтруктураАдреса.Вставить("Город", Выборка.Город);
	СтруктураАдреса.Вставить("Улица", Выборка.Улица);
	СтруктураАдреса.Вставить("Дом", Выборка.Дом);
	СтруктураАдреса.Вставить("Индекс", Выборка.Индекс);
	
	Возврат СтруктураАдреса;
	
КонецФункции

// При создании формы на сервере
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Получаем параметры
	Если Параметры.Свойство("Поездка") Тогда
		Поездка = Параметры.Поездка;
	Иначе
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("ТекущийПользователь") Тогда
		ТекущийПользователь = Параметры.ТекущийПользователь;
	Иначе
		ТекущийПользователь = "";
	КонецЕсли;
	
	Если Параметры.Свойство("Статус") Тогда
		Статус = Параметры.Статус;
	Иначе
		Статус = "";
	КонецЕсли;
	
	// Заполняем данные
	ЗаполнитьДанныеПоездки();
	
КонецПроцедуры

// Заполнение данных о поездке
&НаСервере
Процедура ЗаполнитьДанныеПоездки()
	
	// Запрос для получения данных
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Поездка.ДатаПоездки КАК ДатаПоездки,
		|	Поездка.КоличествоМест КАК КоличествоМест,
		|	Поездка.КоличествоЗанятыхМест КАК КоличествоЗанятыхМест,
		|	Поездка.ПоездкаНачалась КАК ПоездкаНачалась,
		|	Поездка.ПоездкаЗавершена КАК ПоездкаЗавершена,
		|	Поездка.МаршрутПоездки.(
		|		Адрес КАК Адрес,
		|		Адрес.Наименование КАК Наименование,
		|		Время КАК Время,
		|		Остановка КАК Остановка
		|	) КАК МаршрутПоездки
		|ИЗ
		|	Документ.Поездка КАК Поездка
		|ГДЕ
		|	Поездка.Ссылка = &Поездка";
	
	Запрос.УстановитьПараметр("Поездка", Поездка);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	// Заполняем реквизиты
	ДатаПоездки = Выборка.ДатаПоездки;
	СвободныеМеста = Выборка.КоличествоМест - Выборка.КоличествоЗанятыхМест;
	СтатусПоездки = РассчитатьСтатус(Выборка.ПоездкаНачалась, Выборка.ПоездкаЗавершена);
	
	// Заполняем таблицу маршрута
	МаршрутПоездки.Очистить();
	ВыборкаМаршрута = Выборка.МаршрутПоездки.Выбрать();
	
	Пока ВыборкаМаршрута.Следующий() Цикл
		НоваяСтрока = МаршрутПоездки.Добавить();
		НоваяСтрока.Наименование = ?(ВыборкаМаршрута.Наименование = Неопределено, "", ВыборкаМаршрута.Наименование);
		НоваяСтрока.Адрес = ВыборкаМаршрута.Адрес;
		НоваяСтрока.Время = ВыборкаМаршрута.Время;
		НоваяСтрока.Остановка = ВыборкаМаршрута.Остановка;
	КонецЦикла;
	
КонецПроцедуры

// Расчёт статуса поездки
&НаСервере
Функция РассчитатьСтатус(ПоездкаНачалась, ПоездкаЗавершена)
	Если ПоездкаНачалась И ПоездкаЗавершена Тогда
		Возврат "Поездка завершена";
	ИначеЕсли ПоездкаНачалась И НЕ ПоездкаЗавершена Тогда
		Возврат "В пути";
	Иначе
		Возврат "Поездка не началась";
	КонецЕсли;
КонецФункции

// Команда закрытия формы
&НаКлиенте
Процедура ЗакрытьОкно(Команда)
	Закрыть();
КонецПроцедуры

//Синхронизация данных с сервером
Процедура СинхронизироватьНажатие()
    СинхронизацияМобильногоУстройства.СинхронизироватьДанныеНажатие();
КонецПроцедуры

// Клиентская процедура для обработки нажатия кнопки
&НаКлиенте
Процедура ПоказатьНаКартеПоследнееМесто(Команда)
	СинхронизироватьНажатие();
	
	Если СтатусПоездки = "В пути" Тогда
		
		// Получаем последние координаты для поездки
		Координаты = ПолучитьПоследниеКоординатыПоездки(Поездка);
	
		#Если МобильноеПриложениеКлиент Тогда
			Если Координаты <> Неопределено Тогда
				Если ПоддерживаетсяОтображениеКарты() Тогда
					// Отображаем точку на карте
					ПоказатьНаКартеМестоМаршрут(Координаты, Поездка);
				Иначе
					ПоказатьПредупреждение(, НСтр("ru='Отображение карты не поддерживается на устройстве!'"));
				КонецЕсли;
			Иначе
				ПоказатьПредупреждение(, НСтр("ru='Для выбранной поездки нет данных о местоположении!'"));
			КонецЕсли;
		#Иначе
			ПоказатьПредупреждение(, НСтр("ru='Функция доступна только в мобильном приложении!'"));
		#КонецЕсли
		
	Иначе 
		ПоказатьПредупреждение(, "Эта функция доступна, когда трамспорт в пути!");	
	КонецЕсли;
	
КонецПроцедуры

// Процедура, которая вызывает карту с отображением маршрута и текущее местоположения пользователя
// водителя, эта процедура доступна только для пассажиров
&НаКлиенте
Процедура ПоказатьНаКартеМестоМаршрут(Координаты, Поездка) Экспорт
    #Если МобильноеПриложениеКлиент Тогда
        Попытка
            // Проверка координат точки
            Если Координаты = Неопределено 
                Или Координаты.Широта < -90 Или Координаты.Широта > 90 
                Или Координаты.Долгота < -180 Или Координаты.Долгота > 180 Тогда
                ПоказатьПредупреждение(, НСтр("ru='Некорректные координаты!'"));
                Возврат;
            КонецЕсли;

            // Получаем данные маршрута
            ДанныеМаршрута = ПолучитьДанныеМаршрутаТочкаПоследняя(Поездка);
            Если ДанныеМаршрута = Неопределено Или ДанныеМаршрута.Количество() = 0 Тогда
                ПоказатьПредупреждение(, НСтр("ru='Для выбранной поездки нет данных маршрута!'"));
                Возврат;
            КонецЕсли;

            // Формируем URL с маршрутом и точкой
            GoogleMapsURL = ОпределениеПоложения.СформироватьURLМаршрутаТочка(ДанныеМаршрута, Координаты);
            Если ПустаяСтрока(GoogleMapsURL) Тогда
                ПоказатьПредупреждение(, НСтр("ru='Не удалось сформировать маршрут!'"));
                Возврат;
            КонецЕсли;

            // Запускаем Google Maps
            Запуск = Новый ЗапускПриложенияМобильногоУстройства("android.intent.action.VIEW", GoogleMapsURL);
            Запуск.Запустить(Ложь);

        Исключение
            ПоказатьПредупреждение(, НСтр("ru='Ошибка отображения карты: " + ОписаниеОшибки() + "'"));
        КонецПопытки;
    #Иначе
        ПоказатьПредупреждение(, НСтр("ru='Функция доступна только в мобильном приложении!'"));
    #КонецЕсли
КонецПроцедуры

// Серверная процедура для получения последних координат
&НаСервереБезКонтекста
Функция ПолучитьПоследниеКоординатыПоездки(Поездка)
	// Запрос к регистру сведений для получения последней записи
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КоординатыПоездок.Координаты КАК Координаты
	|ИЗ
	|	РегистрСведений.КоординатыПоездок КАК КоординатыПоездок
	|ГДЕ
	|	КоординатыПоездок.Поездка = &Поездка
	|УПОРЯДОЧИТЬ ПО
	|	КоординатыПоездок.ВремяГеопозиции УБЫВ";
	
	Запрос.УстановитьПараметр("Поездка", Поездка);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	// Извлекаем координаты из хранилища значения
	Возврат Выборка.Координаты.Получить();
КонецФункции

// Функция получает данные маршрута для указанной поездки из табличной части документа "Поездка".
&НаСервереБезКонтекста
Функция ПолучитьДанныеМаршрутаТочкаПоследняя(Поездка)
    
    // Создаем новый объект запроса для выполнения SQL-подобного запроса к базе данных.
    Запрос = Новый Запрос;
    
    // Текст запроса к табличной части "МаршрутПоездки" документа "Поездка".
    // Выбираем адресные данные (страна, регион, город, улица, дом, индекс) и время точки маршрута.
    Запрос.Текст = 
    "ВЫБРАТЬ
    |	ПоездкаМаршрутПоездки.Адрес.Страна КАК Страна,
    |	ПоездкаМаршрутПоездки.Адрес.Регион КАК Регион,
    |	ПоездкаМаршрутПоездки.Адрес.Город КАК Город,
    |	ПоездкаМаршрутПоездки.Адрес.Улица КАК Улица,
    |	ПоездкаМаршрутПоездки.Адрес.Дом КАК Дом,
    |	ПоездкаМаршрутПоездки.Адрес.Индекс КАК Индекс,
    |	ПоездкаМаршрутПоездки.Время КАК Время
    |ИЗ
    |	Документ.Поездка.МаршрутПоездки КАК ПоездкаМаршрутПоездки
    |ГДЕ
    |	ПоездкаМаршрутПоездки.Ссылка = &Поездка
    |УПОРЯДОЧИТЬ ПО
    |	ПоездкаМаршрутПоездки.Время";
    
    // Устанавливаем параметр запроса "Поездка" для фильтрации данных по конкретному документу.
    Запрос.УстановитьПараметр("Поездка", Поездка);
    
    // Выполняем запрос и сохраняем результат.
    Результат = Запрос.Выполнить();
    
    // Проверяем, пустой ли результат запроса (нет строк в табличной части).
    Если Результат.Пустой() Тогда
        // Выводим сообщение об ошибке для отладки, указывая, что данные маршрута не найдены.
        Сообщить("Ошибка: Данные маршрута не найдены для поездки " + Поездка);
        // Возвращаем Неопределено, чтобы сигнализировать об отсутствии данных.
        Возврат Неопределено;
    КонецЕсли;
    
    // Создаем массив для хранения данных маршрута.
    ДанныеМаршрута = Новый Массив;
    
    // Получаем выборку из результата запроса для перебора строк.
    Выборка = Результат.Выбрать();
    
    // Перебираем строки выборки.
    Пока Выборка.Следующий() Цикл
        // Проверяем, заполнено ли поле "Город" (обязательное для адреса).
        Если НЕ ЗначениеЗаполнено(Выборка.Город) Тогда
            // Если город не заполнен, выводим сообщение и пропускаем эту точку маршрута.
            Сообщить("Пропущена точка маршрута: город не заполнен");
            Продолжить;
        КонецЕсли;
        
        // Создаем структуру для хранения данных одной точки маршрута.
        СтруктураАдреса = Новый Структура;
        // Заполняем структуру данными из выборки.
        СтруктураАдреса.Вставить("Страна", Выборка.Страна);
        СтруктураАдреса.Вставить("Регион", Выборка.Регион);
        СтруктураАдреса.Вставить("Город", Выборка.Город);
        СтруктураАдреса.Вставить("Улица", Выборка.Улица);
        СтруктураАдреса.Вставить("Дом", Выборка.Дом);
        СтруктураАдреса.Вставить("Индекс", Выборка.Индекс);
        СтруктураАдреса.Вставить("Время", Выборка.Время);
        
        // Добавляем структуру в массив данных маршрута.
        ДанныеМаршрута.Добавить(СтруктураАдреса);
    КонецЦикла;
    
    // Проверяем, содержит ли массив данные после обработки.
    Если ДанныеМаршрута.Количество() = 0 Тогда
        // Если массив пуст (например, все точки маршрута имели пустой город), выводим сообщение об ошибке.
        Сообщить("Ошибка: Нет валидных точек маршрута");
        // Возвращаем Неопределено, чтобы сигнализировать об отсутствии валидных данных.
        Возврат Неопределено;
    КонецЕсли;
    
    // Возвращаем массив с данными маршрута.
    Возврат ДанныеМаршрута;
КонецФункции

// Функция возвращает данные адреса, который является начальной точкой маршрута
&НаСервереБезКонтекста
Функция ИзвлечьСтруктуруАдреса(АдресСсылка)
	// Получение данных адреса из справочника
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Адреса.Страна,
		|	Адреса.Регион,
		|	Адреса.Город,
		|	Адреса.Улица,
		|	Адреса.Дом,
		|	Адреса.Индекс
		|ИЗ
		|	Справочник.Адреса КАК Адреса
		|ГДЕ
		|	Адреса.Ссылка = &Адрес";
	
	Запрос.УстановитьПараметр("Адрес", АдресСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Проверяем обязательность поля Город
	Если НЕ ЗначениеЗаполнено(Выборка.Город) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураАдреса = Новый Структура;
	СтруктураАдреса.Вставить("Страна", ?(ЗначениеЗаполнено(Выборка.Страна), Выборка.Страна, ""));
	СтруктураАдреса.Вставить("Регион", ?(ЗначениеЗаполнено(Выборка.Регион), Выборка.Регион, ""));
	СтруктураАдреса.Вставить("Город", Выборка.Город);
	СтруктураАдреса.Вставить("Улица", ?(ЗначениеЗаполнено(Выборка.Улица), Выборка.Улица, ""));
	СтруктураАдреса.Вставить("Дом", ?(ЗначениеЗаполнено(Выборка.Дом), Выборка.Дом, ""));
	СтруктураАдреса.Вставить("Индекс", ?(ЗначениеЗаполнено(Выборка.Индекс), Выборка.Индекс, ""));
	
	Возврат СтруктураАдреса;
КонецФункции

// Команда отмены поездки
&НаКлиенте
Процедура ОтменитьПоездку(Команда)
	СинхронизироватьНажатие();
	
	// Провернка соединения с сервером
	Если ПроверитьИнтернетСоединение() Тогда 
		ОтменаПоездок.ОтменитьПоездкуБезПроверкиСети(Поездка, ТекущийПользователь, СтатусПоездки);	
	Иначе 
		ПоказатьПредупреждение(, НСтр("ru='Нет сети, нет возможности отменить поездку!'"));
	КонецЕсли;
	
КонецПроцедуры

// Создается локальное уведомление на устройстве для пользователя
&НаКлиенте
Асинх Процедура СоздатьНапоминаниеНажатие(Элемент)
    #Если МобильноеПриложениеКлиент Тогда
		
		// Нельзя устанавливать уведомление для начавшейся поездки
		Если Статус = "В пути" Тогда
            ПоказатьПредупреждение(Неопределено, НСтр("ru='Поездка уже началась!'"));
            Возврат;
        КонецЕсли;
   
		Попытка
			// Обработка даты и времени уведомления
            ДатаУведомления = Ждать ВвестиДатуАсинх(ТекущаяДата(), "Введите дату и время уведомления", ЧастиДаты.ДатаВремя);
			
			// Проверка 1: Дата уведомления не должна быть меньше текущей
        	ТекущаяДатаВремя = ТекущаяДата();
        	Если ДатаУведомления < ТекущаяДатаВремя Тогда
            	ПоказатьПредупреждение(Неопределено, НСтр("ru='Дата уведомления не может быть меньше текущей даты и времени!'"));
            	Возврат;
        	КонецЕсли;
        
        	// Проверка 2: Разница между текущей датой и датой уведомления минимум 5 минут
        	РазницаВСекундах = ДатаУведомления - ТекущаяДатаВремя;
        	Если РазницаВСекундах < 300 Тогда // 300 секунд = 5 минут
            	ПоказатьПредупреждение(Неопределено, НСтр("ru='Дата уведомления должна быть минимум на 5 минут позже текущей даты!'"));
            	Возврат;
        	КонецЕсли;
        
        	// Проверка 3: Дата уведомления не должна быть больше даты поездки
        	ДатаПоездки = ПолучитьДатуПоездкиИзДокумента(Поездка);
        	ВремяПосадки = ПолучитьВремяОстановкиПосадки(Поездка);
        	Если ДатаПоездки = Дата(1,1,1) Или ВремяПосадки = Дата(1,1,1) Тогда
            	ПоказатьПредупреждение(Неопределено, НСтр("ru='Не удалось определить дату или время поездки!'"));
            	Возврат;
        	КонецЕсли;
			
			// Создание уведомления
            Уведомление = Новый ДоставляемоеУведомление;
            Уведомление.Заголовок = "Запланирована поездка";
			
            Уведомление.Текст = ПолучитьСообщениеОПоездке(ПолучитьДатуПоездкиИзДокумента(Поездка), ПолучитьВремяОстановкиПосадки(Поездка));
            Уведомление.ДатаПоявленияУниверсальноеВремя = ДатаОтправки(ДатаУведомления);
			Уведомление.Данные = "Trip_" + Строка(Поездка.УникальныйИдентификатор()) + "_" + Формат(ДатаУведомления, "ДФ=yyyyMMddHHmmss");
            
            ДоставляемыеУведомления.ДобавитьЛокальноеУведомление(Уведомление);
            Сообщить("Тестовое напоминание на " + Формат(ДатаУведомления, "ДФ='dd.MM.yyyy HH:mm:ss'") + " создано!");
			СоздатьЗаписьЛокальногоУведомления(ТекущийПользователь, Уведомление.Данные, Поездка);
            
        Исключение
            Сообщить("Ошибка при создании напоминания: " + ОписаниеОшибки());
        КонецПопытки
    #Иначе
        Сообщить("Работа с уведомлениями не поддерживается в данном контексте!");
    #КонецЕсли
КонецПроцедуры

// Определение периода уведомления
&НаСервере
Функция ДатаОтправки(ДатаУведомления)
    РазницаДат = ДатаУведомления - ТекущаяДата();
    Возврат ТекущаяУниверсальнаяДата() + РазницаДат;
КонецФункции

// Получение даты выбранной поездки, необходимо для вычисления периода передачи локальных уведомлений
&НаСервере
Функция ПолучитьДатуПоездкиИзДокумента(Поездка)
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   Поездка.ДатаПоездки КАК ДатаПоездки
        |ИЗ
        |   Документ.Поездка КАК Поездка
        |ГДЕ
        |   Поездка.Ссылка = &Поездка";
    
    Запрос.УстановитьПараметр("Поездка", Поездка);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    Если РезультатЗапроса.Пустой() Тогда
        Возврат Дата(1,1,1); // Пустая дата вместо исключения
    КонецЕсли;
    
    Выборка = РезультатЗапроса.Выбрать();
    Выборка.Следующий();
    
    Возврат Выборка.ДатаПоездки;
КонецФункции

// необходимо для получения окончания поездки, чтобы было не возможно
// поставить уведомление после окончания поездки
&НаСервере
Функция ПолучитьВремяОстановкиПосадки(Поездка)
    // Находим адрес остановки посадки для текущего пользователя
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   ПоездкаЗабронированныеМеста.ОстановкаПосадки КАК ОстановкаПосадки
        |ИЗ
        |   Документ.Поездка.ЗабронированныеМеста КАК ПоездкаЗабронированныеМеста
        |ГДЕ
        |   ПоездкаЗабронированныеМеста.Ссылка = &Поездка
        |   И ПоездкаЗабронированныеМеста.Пассажир = &ТекущийПользователь";
    
    Запрос.УстановитьПараметр("Поездка", Поездка);
    Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
    
    РезультатЗапроса = Запрос.Выполнить();
    
	Если РезультатЗапроса.Пустой() Тогда
	// Пустая дата, если адрес не найден
        Возврат Дата(1,1,1); 
    КонецЕсли;
    
    Выборка = РезультатЗапроса.Выбрать();
    Выборка.Следующий();
    ОстановкаПосадки = Выборка.ОстановкаПосадки;
    
    // Находим время для адреса остановки посадки
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   ПоездкаМаршрутПоездки.Время КАК Время
        |ИЗ
        |   Документ.Поездка.МаршрутПоездки КАК ПоездкаМаршрутПоездки
        |ГДЕ
        |   ПоездкаМаршрутПоездки.Ссылка = &Поездка
        |   И ПоездкаМаршрутПоездки.Адрес = &ОстановкаПосадки";
    
    Запрос.УстановитьПараметр("Поездка", Поездка);
    Запрос.УстановитьПараметр("ОстановкаПосадки", ОстановкаПосадки);
    
    РезультатЗапроса = Запрос.Выполнить();
    
	Если РезультатЗапроса.Пустой() Тогда
	// Пустая дата вместо исключения
        Возврат Дата(1,1,1); 
    КонецЕсли;
    
    Выборка = РезультатЗапроса.Выбрать();
    Выборка.Следующий();
    
    Возврат Выборка.Время;
КонецФункции

// Создание сообщения для уведомления
&НаСервере
Функция ПолучитьСообщениеОПоездке(ДатаПоездки, ВремяПосадки)
    // Объединяем дату поездки и время посадки
    ДатаВремяПосадки = Дата(Год(ДатаПоездки), Месяц(ДатаПоездки), День(ДатаПоездки),
                            Час(ВремяПосадки), Минута(ВремяПосадки), Секунда(ВремяПосадки));
    
    // Форматируем дату и время в строку
    ФорматированнаяДата = Формат(ДатаВремяПосадки, "ДЛФ=DT");
    
    // Формируем локализованное сообщение
    Сообщение = НСтр("ru='У вас запланирована поездка на %1'");
    Сообщение = СтрШаблон(Сообщение, ФорматированнаяДата);
    
    Возврат Сообщение;
КонецФункции

// Записываем локальное увеломление в системе OC Android 
&НаСервере
Процедура СоздатьЗаписьЛокальногоУведомления(Пассажир, ИдентификаторУведомления, Поездка)
    НовыйЭлемент = Справочники.ЛокальныеУведомления.СоздатьЭлемент();
    НовыйЭлемент.Пассажир = Пассажир;
	// Задаем идентификатор уведомления
    НовыйЭлемент.ИдентификаторУведомления = ИдентификаторУведомления;
    НовыйЭлемент.Поездка = Поездка;
	НовыйЭлемент.Наименование = "Пользователь_" + Пассажир;
    
    Попытка
        НовыйЭлемент.Записать();
    Исключение
        Сообщить("Ошибка при записи в справочник ЛокальныеУведомления: " + ОписаниеОшибки());
    КонецПопытки;
КонецПроцедуры

// Показывает маршрут для конкретного пользователя, начало и конец, он выбрал сам
&НаКлиенте
Процедура ОтобразитьМаршрут(Команда)
	
	// Поддержка актуальности данных
	СинхронизироватьНажатие();
	
	#Если МобильноеПриложениеКлиент Тогда
		// Получаем данные маршрута
		ДанныеМаршрута = СобратьДанныеМаршрута(Поездка, ТекущийПользователь);
		
		Если ДанныеМаршрута = Неопределено ИЛИ ДанныеМаршрута.Количество() < 2 Тогда
			ПоказатьПредупреждение(, НСтр("ru='Для выбранной поездки нет данных маршрута!'"));
			Возврат;
		КонецЕсли;
		
		// Формируем URL и начальный адрес для Google Maps
		РезультатURL = ОпределениеПоложения.СоздатьURLМаршрутаМеждуТочками(ДанныеМаршрута);
		URL = РезультатURL.URL;
		НачальныйАдрес = РезультатURL.Начало;
		
		Если НЕ ЗначениеЗаполнено(URL) Тогда
			ПоказатьПредупреждение(, НСтр("ru='Не удалось построить маршрут: недостаточно точек!'"));
			Возврат;
		КонецЕсли;
		
		// Запускаем приложение карт
		Запуск = Новый ЗапускПриложенияМобильногоУстройства("android.intent.action.VIEW", URL);
		Попытка
			Запуск.Запустить(Ложь);
		Исключение
			
			ТекстОшибки = НСтр("ru='Ошибка запуска Google Maps: '") + ОписаниеОшибки();
            ПоказатьПредупреждение(, ТекстОшибки);
			
		КонецПопытки;
	#КонецЕсли
КонецПроцедуры

// Функция выдает данные с точками маршрута, включает точки от начальной выбранной точки до конечной для конкретного пользователя
&НаСервереБезКонтекста
Функция СобратьДанныеМаршрута(Поездка, ТекущийПользователь)
	// Запрос для получения остановок посадки, высадки и маршрута
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоездкаЗабронированныеМеста.ОстановкаПосадки КАК ОстановкаПосадки,
		|	ПоездкаЗабронированныеМеста.ОстановкаВысадки КАК ОстановкаВысадки
		|ПОМЕСТИТЬ Бронь
		|ИЗ
		|	Документ.Поездка.ЗабронированныеМеста КАК ПоездкаЗабронированныеМеста
		|ГДЕ
		|	ПоездкаЗабронированныеМеста.Ссылка = &Поездка
		|	И ПоездкаЗабронированныеМеста.Пассажир = &ТекущийПользователь
		|	И ПоездкаЗабронированныеМеста.БроньОтменена = ЛОЖЬ
		|;
		|
		|ВЫБРАТЬ
		|	ПоездкаМаршрутПоездки.Адрес КАК Адрес,
		|	ПоездкаМаршрутПоездки.Время КАК Время,
		|	ПоездкаМаршрутПоездки.НомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА ПоездкаМаршрутПоездки.Адрес = Бронь.ОстановкаПосадки
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоПосадка,
		|	ВЫБОР
		|		КОГДА ПоездкаМаршрутПоездки.Адрес = Бронь.ОстановкаВысадки
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоВысадка
		|ИЗ
		|	Документ.Поездка.МаршрутПоездки КАК ПоездкаМаршрутПоездки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Бронь КАК Бронь
		|		ПО ИСТИНА
		|ГДЕ
		|	ПоездкаМаршрутПоездки.Ссылка = &Поездка";
	
	Запрос.УстановитьПараметр("Поездка", Поездка);
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Формируем массив адресов
	ДанныеМаршрута = Новый Массив;
	Выборка = Результат.Выбрать();
	
	ВремяПосадки = Дата(1,1,1);
	ОстановкаПосадки = Неопределено;
	ОстановкаВысадки = Неопределено;
	ВключатьТочки = Ложь;
	
	// Находим время посадки и остановки
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЭтоПосадка Тогда
			ВремяПосадки = Выборка.Время;
			ОстановкаПосадки = Выборка.Адрес;
		КонецЕсли;
		Если Выборка.ЭтоВысадка Тогда
			ОстановкаВысадки = Выборка.Адрес;
		КонецЕсли;
	КонецЦикла;
	
	// Проверка наличия брони
	Если ОстановкаПосадки = Неопределено ИЛИ ОстановкаВысадки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Формируем маршрут
	Выборка.Сбросить();
	Пока Выборка.Следующий() Цикл
		// Начинаем с остановки посадки
		Если Выборка.Адрес = ОстановкаПосадки Тогда
			ВключатьТочки = Истина;
			СтруктураАдреса = ИзвлечьСтруктуруАдреса(Выборка.Адрес);
			Если СтруктураАдреса = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ДанныеМаршрута.Добавить(СтруктураАдреса);
		// Промежуточные точки
		ИначеЕсли ВключатьТочки И Выборка.Время > ВремяПосадки И Выборка.Адрес <> ОстановкаВысадки Тогда
			СтруктураАдреса = ИзвлечьСтруктуруАдреса(Выборка.Адрес);
			Если СтруктураАдреса = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ДанныеМаршрута.Добавить(СтруктураАдреса);

		// Остановка высадки
		ИначеЕсли Выборка.Адрес = ОстановкаВысадки Тогда
			СтруктураАдреса = ИзвлечьСтруктуруАдреса(Выборка.Адрес);
			Если СтруктураАдреса = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ДанныеМаршрута.Добавить(СтруктураАдреса);
			ВключатьТочки = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	// Проверка маршрута
	Если ДанныеМаршрута.Количество() < 2 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДанныеМаршрута;
КонецФункции
