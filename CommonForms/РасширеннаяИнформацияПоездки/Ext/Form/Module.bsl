// Форма для для просмотра рассширенной информации перед записью на поездку

// Создание формы на сервере
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Получаем параметры
	Если Параметры.Свойство("Поездка") Тогда
		Поездка = Параметры.Поездка;
	Иначе
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("ТекущийПользователь") Тогда
		ТекущийПользователь = Параметры.ТекущийПользователь;
	Иначе
		ТекущийПользователь = "";
	КонецЕсли;
	
	// Заполняем данные
	ЗаполнитьДанныеПоездки();
	
КонецПроцедуры

// Заполнение данных о поездке
&НаСервере
Процедура ЗаполнитьДанныеПоездки()
	
	// Запрос для получения данных
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Поездка.ДатаПоездки КАК ДатаПоездки,
		|	Поездка.КоличествоМест КАК КоличествоМест,
		|	Поездка.КоличествоЗанятыхМест КАК КоличествоЗанятыхМест,
		|	Поездка.МаршрутПоездки.(
		|		Адрес КАК Адрес,
		|		Адрес.Наименование КАК Наименование,
		|		Время КАК Время,
		|		Остановка КАК Остановка
		|	) КАК МаршрутПоездки
		|ИЗ
		|	Документ.Поездка КАК Поездка
		|ГДЕ
		|	Поездка.Ссылка = &Поездка";
	
	Запрос.УстановитьПараметр("Поездка", Поездка);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	// Заполняем реквизиты
	ДатаПоездки = Выборка.ДатаПоездки;
	СвободныеМеста = Выборка.КоличествоМест - Выборка.КоличествоЗанятыхМест;
	
	// Заполняем таблицу маршрута
	МаршрутПоездки.Очистить();
	ВыборкаМаршрута = Выборка.МаршрутПоездки.Выбрать();
	
	Пока ВыборкаМаршрута.Следующий() Цикл
		НоваяСтрока = МаршрутПоездки.Добавить();
		НоваяСтрока.Наименование = ?(ВыборкаМаршрута.Наименование = Неопределено, "", ВыборкаМаршрута.Наименование);
		НоваяСтрока.Адрес = ВыборкаМаршрута.Адрес;
		НоваяСтрока.Время = ВыборкаМаршрута.Время;
		НоваяСтрока.Остановка = ВыборкаМаршрута.Остановка;
	КонецЦикла;
		
КонецПроцедуры

// Команда Записаться
&НаКлиенте
Процедура ЗаписатьсяНаПоездку(Команда)
	
	//Обмен данными с сервером
	СинхронизироватьНажатие();
	
	// Передача параметров в форму ВыборОстановок
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Поездка", Поездка);
	ПараметрыФормы.Вставить("Пользователь", ТекущийПользователь);
	
	ОткрытьФорму("ОбщаяФорма.ВыборОстановок", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

// Обработчик омена данными с сервером и мобильным приложением
Процедура СинхронизироватьНажатие()
    СинхронизацияМобильногоУстройства.СинхронизироватьДанныеНажатие();
КонецПроцедуры

// Отображение маршрута данной поездки полностью от начала и до конца
&НаКлиенте
Процедура ПоказатьМаршрут(Команда)
	
	СинхронизироватьНажатие();
		
	#Если МобильноеПриложениеКлиент Тогда
		// Получаем данные маршрута
		ДанныеМаршрута = ПолучитьДанныеМаршрута(Поездка);
		Если ДанныеМаршрута = Неопределено ИЛИ ДанныеМаршрута.Количество() = 0 Тогда
			ПоказатьПредупреждение(, "Для выбранной поездки нет данных маршрута!");
			Возврат;
		КонецЕсли;
		
		// Формируем URL для Google Maps
		Результат = ОпределениеПоложения.СоздатьURLМаршрутаМеждуТочками(ДанныеМаршрута);
		URL = Результат.URL;
		Если НЕ ЗначениеЗаполнено(URL) Тогда
			ПоказатьПредупреждение(, "Не удалось построить маршрут: недостаточно точек!");
			Возврат;
		КонецЕсли;
				
		// Пробуем запустить Google Maps
		Запуск = Новый ЗапускПриложенияМобильногоУстройства("android.intent.action.VIEW", URL);
		Попытка
			Запуск.Запустить(Ложь);
		Исключение
			ПоказатьПредупреждение(, "Не удалось открыть Google Maps. Открываем в браузере...");
			Попытка
				ПерейтиПоНавигационнойСсылке(URL);
			Исключение
				ПоказатьПредупреждение(, "Ошибка открытия карты: " + ОписаниеОшибки());
			КонецПопытки;
		КонецПопытки;
	#Иначе
		// Для немобильных клиентов
		ДанныеМаршрута = ПолучитьДанныеМаршрута(Поездка);
		Если ДанныеМаршрута = Неопределено ИЛИ ДанныеМаршрута.Количество() = 0 Тогда
			ПоказатьПредупреждение(, "Для выбранной поездки нет данных маршрута!");
			Возврат;
		КонецЕсли;
		
		Результат = ОпределениеПоложения.СоздатьURLМаршрутаМеждуТочками(ДанныеМаршрута);
		URL = Результат.URL;
		Если НЕ ЗначениеЗаполнено(URL) Тогда
			ПоказатьПредупреждение(, "Не удалось построить маршрут: недостаточно точек!");
			Возврат;
		КонецЕсли;
				
		// Открываем URL в браузере
		Попытка
			ПерейтиПоНавигационнойСсылке(URL);
		Исключение
			ПоказатьПредупреждение(, "Ошибка открытия карты: " + ОписаниеОшибки());
		КонецПопытки;
	#КонецЕсли
КонецПроцедуры

// Функция получает данные маршрута для указанной поездки из табличной части документа "Поездка".
&НаСервереБезКонтекста
Функция ПолучитьДанныеМаршрута(Поездка)
    
    // Создаем новый объект запроса для выполнения SQL-подобного запроса к базе данных.
    Запрос = Новый Запрос;
    
    // Текст запроса к табличной части "МаршрутПоездки" документа "Поездка".
    // Выбираем адресные данные (страна, регион, город, улица, дом, индекс) и время точки маршрута.
    Запрос.Текст = 
    "ВЫБРАТЬ
    |	ПоездкаМаршрутПоездки.Адрес.Страна КАК Страна,
    |	ПоездкаМаршрутПоездки.Адрес.Регион КАК Регион,
    |	ПоездкаМаршрутПоездки.Адрес.Город КАК Город,
    |	ПоездкаМаршрутПоездки.Адрес.Улица КАК Улица,
    |	ПоездкаМаршрутПоездки.Адрес.Дом КАК Дом,
    |	ПоездкаМаршрутПоездки.Адрес.Индекс КАК Индекс,
    |	ПоездкаМаршрутПоездки.Время КАК Время
    |ИЗ
    |	Документ.Поездка.МаршрутПоездки КАК ПоездкаМаршрутПоездки
    |ГДЕ
    |	ПоездкаМаршрутПоездки.Ссылка = &Поездка
    |УПОРЯДОЧИТЬ ПО
    |	ПоездкаМаршрутПоездки.Время";
    
    // Устанавливаем параметр запроса "Поездка" для фильтрации данных по конкретному документу.
    Запрос.УстановитьПараметр("Поездка", Поездка);
    
    // Выполняем запрос и сохраняем результат.
    Результат = Запрос.Выполнить();
    
    // Проверяем, пустой ли результат запроса (нет строк в табличной части).
    Если Результат.Пустой() Тогда
        // Выводим сообщение об ошибке для отладки, указывая, что данные маршрута не найдены.
        Сообщить("Ошибка: Данные маршрута не найдены для поездки " + Поездка);
        // Возвращаем Неопределено, чтобы сигнализировать об отсутствии данных.
        Возврат Неопределено;
    КонецЕсли;
    
    // Создаем массив для хранения данных маршрута.
    ДанныеМаршрута = Новый Массив;
    
    // Получаем выборку из результата запроса для перебора строк.
    Выборка = Результат.Выбрать();
    
    // Перебираем строки выборки.
    Пока Выборка.Следующий() Цикл
        // Проверяем, заполнено ли поле "Город" (обязательное для адреса).
        Если НЕ ЗначениеЗаполнено(Выборка.Город) Тогда
            // Если город не заполнен, выводим сообщение и пропускаем эту точку маршрута.
            Сообщить("Пропущена точка маршрута: город не заполнен");
            Продолжить;
        КонецЕсли;
        
        // Создаем структуру для хранения данных одной точки маршрута.
        СтруктураАдреса = Новый Структура;
        // Заполняем структуру данными из выборки.
        СтруктураАдреса.Вставить("Страна", Выборка.Страна);
        СтруктураАдреса.Вставить("Регион", Выборка.Регион);
        СтруктураАдреса.Вставить("Город", Выборка.Город);
        СтруктураАдреса.Вставить("Улица", Выборка.Улица);
        СтруктураАдреса.Вставить("Дом", Выборка.Дом);
        СтруктураАдреса.Вставить("Индекс", Выборка.Индекс);
        СтруктураАдреса.Вставить("Время", Выборка.Время);
        
        // Добавляем структуру в массив данных маршрута.
        ДанныеМаршрута.Добавить(СтруктураАдреса);
    КонецЦикла;
    
    // Проверяем, содержит ли массив данные после обработки.
    Если ДанныеМаршрута.Количество() = 0 Тогда
        // Если массив пуст (например, все точки маршрута имели пустой город), выводим сообщение об ошибке.
        Сообщить("Ошибка: Нет валидных точек маршрута");
        // Возвращаем Неопределено, чтобы сигнализировать об отсутствии валидных данных.
        Возврат Неопределено;
    КонецЕсли;
    
    // Возвращаем массив с данными маршрута.
    Возврат ДанныеМаршрута;
КонецФункции

// Команда для показа маршрута от текущего местоположения до выбранного адреса
&НаКлиенте
Процедура ПоказатьМаршрутДоОстановки(Команда)
	
	СинхронизироватьНажатие();
	
	#Если МобильноеПриложениеКлиент Тогда
		// Получаем текущую строку с адресом
		ТекущаяСтрока = Элементы.МаршрутПоездки.ТекущиеДанные;
		Если ТекущаяСтрока = Неопределено Тогда
			ПоказатьПредупреждение(, "Выберите адрес для построения маршрута!");
			Возврат;
		КонецЕсли;
		
		// Получаем данные адреса
		ДанныеАдреса = ПолучитьДанныеАдреса(ТекущаяСтрока.Адрес);
		Если ДанныеАдреса = Неопределено Тогда
			ПоказатьПредупреждение(, "Не удалось получить данные адреса!");
			Возврат;
		КонецЕсли;
		
		// Получаем текущее местоположение устройства
		ТекущееМестоположение = ОпределениеПоложения.ПолучитьТекущееМестоположение();
		Если ТекущееМестоположение = Неопределено Тогда
			ПоказатьПредупреждение(, "Не удалось определить текущее местоположение!");
			Возврат;
		КонецЕсли;
		
		// Формируем URL для Google Maps
		URL = ОпределениеПоложения.СоздатьURLМаршрутаДоТочки(ДанныеАдреса, ТекущееМестоположение);
		Если НЕ ЗначениеЗаполнено(URL) Тогда
			ПоказатьПредупреждение(, "Не удалось построить маршрут!");
			Возврат;
		КонецЕсли;
				
		// Запускаем приложение карт
		Запуск = Новый ЗапускПриложенияМобильногоУстройства("android.intent.action.VIEW", URL);
		Попытка
			Запуск.Запустить(Ложь);
		Исключение
			ПоказатьПредупреждение(, "Ошибка запуска приложения карт: " + ОписаниеОшибки());
		КонецПопытки;
	#Иначе
		// Для немобильных клиентов показываем маршрут без местоположения
		ТекущаяСтрока = Элементы.МаршрутПоездки.ТекущиеДанные;
		Если ТекущаяСтрока = Неопределено Тогда
			ПоказатьПредупреждение(, "Выберите адрес для построения маршрута!");
			Возврат;
		КонецЕсли;
		
		ДанныеАдреса = ПолучитьДанныеАдреса(ТекущаяСтрока.Адрес);
		Если ДанныеАдреса = Неопределено Тогда
			ПоказатьПредупреждение(, "Не удалось получить данные адреса!");
			Возврат;
		КонецЕсли;
		
		URL = ОпределениеПоложения.СоздатьURLМаршрутаДоТочки(ДанныеАдреса);
		Если НЕ ЗначениеЗаполнено(URL) Тогда
			ПоказатьПредупреждение(, "Не удалось построить маршрут!");
			Возврат;
		КонецЕсли;
				
		// Открываем URL в браузере
		Попытка
			ПерейтиПоНавигационнойСсылке(URL);
		Исключение
			ПоказатьПредупреждение(, "Ошибка открытия карты: " + ОписаниеОшибки());
		КонецПопытки;
	#КонецЕсли
	
КонецПроцедуры

// Проверка подключения к интернету
&НаСервереБезКонтекста
Функция ПроверитьИнтернетСоединение()
	Возврат СетевоеСоединение.ПроверитьСвязьССервером();
КонецФункции

// Получение данных адреса из справочника
&НаСервереБезКонтекста
Функция ПолучитьДанныеАдреса(АдресСсылка)
	
	// Запрос к справочнику с адресами
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Адреса.Страна КАК Страна,
	|	Адреса.Регион КАК Регион,
	|	Адреса.Город КАК Город,
	|	Адреса.Улица КАК Улица,
	|	Адреса.Дом КАК Дом,
	|	Адреса.Индекс КАК Индекс
	|ИЗ
	|	Справочник.Адреса КАК Адреса
	|ГДЕ
	|	Адреса.Ссылка = &АдресСсылка";
	
	Запрос.УстановитьПараметр("АдресСсылка", АдресСсылка);
	
	//Выполнение запроса
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Если НЕ ЗначениеЗаполнено(Выборка.Город) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Город обязателен для адреса!'");
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецЕсли;
	
	// Создание структуры с данными
	СтруктураАдреса = Новый Структура;
	СтруктураАдреса.Вставить("Страна", Выборка.Страна);
	СтруктураАдреса.Вставить("Регион", Выборка.Регион);
	СтруктураАдреса.Вставить("Город", Выборка.Город);
	СтруктураАдреса.Вставить("Улица", Выборка.Улица);
	СтруктураАдреса.Вставить("Дом", Выборка.Дом);
	СтруктураАдреса.Вставить("Индекс", Выборка.Индекс);
	
	Возврат СтруктураАдреса;
	
КонецФункции
