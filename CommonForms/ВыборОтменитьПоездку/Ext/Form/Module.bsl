//Форма для отмены брони поездки

// При создании формы на сервере
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Получение поездки
	Если Параметры.Свойство("Поездка") Тогда
		Поездка = Параметры.Поездка;
	Иначе
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Получение идентификатор пользователя
	Если Параметры.Свойство("Пользователь") Тогда
		Пользователь = Параметры.Пользователь;
	Иначе
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Инициализация причины
	ПричинаОтмены = "";
	
	// Заполнение и инициализация всплывающего списка выбора
	Элементы.ПричинаОтмены.СписокВыбора.Очистить();
	Элементы.ПричинаОтмены.СписокВыбора.Добавить("Изменение планов");
	Элементы.ПричинаОтмены.СписокВыбора.Добавить("Личные обстоятельства");
	Элементы.ПричинаОтмены.СписокВыбора.Добавить("Проблемы со здоровьем");
	Элементы.ПричинаОтмены.СписокВыбора.Добавить("Опоздание на транспорт");
	Элементы.ПричинаОтмены.СписокВыбора.Добавить("Отмена мероприятия");
	Элементы.ПричинаОтмены.СписокВыбора.Добавить("Финансовые трудности");
	Элементы.ПричинаОтмены.СписокВыбора.Добавить("Погодные условия");
	Элементы.ПричинаОтмены.СписокВыбора.Добавить("Транспортные проблемы");
	Элементы.ПричинаОтмены.СписокВыбора.Добавить("Недостаток времени");
	Элементы.ПричинаОтмены.СписокВыбора.Добавить("Другое");
	// Показываем кнопку выбора
	Элементы.ПричинаОтмены.КнопкаВыбора = Истина;
	// Разрешаем ввод произвольного текста
	Элементы.ПричинаОтмены.РежимВыбораИзСписка = Ложь;
	// Подсказка в поле
	Элементы.ПричинаОтмены.ПодсказкаВвода = "Выберите или введите причину отмены";
	// Всплывающая подсказка
    Элементы.ПричинаОтмены.Подсказка = "Нажмите стрелку для выбора причины из списка";
	// Поле обязательно для заполнения
    Элементы.ПричинаОтмены.АвтоОтметкаНезаполненного = Истина; 
	
КонецПроцедуры

// Сохранение результата отмены поездки
&НаКлиенте
Процедура Подтвердить(Команда)
	// Проверка ввода причины отмены
    Если ПустаяСтрока(ПричинаОтмены) Тогда
        Предупреждение(Неопределено, НСтр("ru='Укажите причину отмены!'"));
        Возврат;
    КонецЕсли;
	
	// Синхронизация данных с сервером для поддержки актуальности данных
    СинхронизироватьНажатие();
    
    // Выполнение отмены на сервере
    Результат = ВыполнитьОтменуНаСервере();
    Если Результат.Успех Тогда
        // Получаем массив идентификаторов и удаляем записи из справочника
        МассивИдентификаторов = УдалитьУведомленияПоПоездкеИПассажиру(Поездка, Пользователь);
        
        // Отменяем уведомления на клиенте
        #Если МобильноеПриложениеКлиент Тогда
            Для Каждого Идентификатор Из МассивИдентификаторов Цикл
                Попытка
                    ДоставляемыеУведомления.ОтменитьЛокальныеУведомления();
                Исключение
                    Сообщить("Ошибка при отмене уведомления с идентификатором " + Идентификатор + ": " + ОписаниеОшибки());
                КонецПопытки;
            КонецЦикла;
        #КонецЕсли
        
        ПоказатьОповещениеПользователя(НСтр("ru='Поездка отменена!'"), , "Поездка: " + Строка(Поездка));
        Оповестить("ОбновитьДоступныеПоездки");
        Закрыть();
    Иначе
        Предупреждение(Неопределено, Результат.Сообщение);
    КонецЕсли;
КонецПроцедуры

// Функция удаления локальных уведомлений
&НаСервере
Функция УдалитьУведомленияПоПоездкеИПассажиру(Поездка, Пассажир)
    МассивИдентификаторов = Новый Массив;
	
	// Запрос на извлечение данных
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   ЛокальныеУведомления.Ссылка,
        |   ЛокальныеУведомления.ИдентификаторУведомления
        |ИЗ
        |   Справочник.ЛокальныеУведомления КАК ЛокальныеУведомления
        |ГДЕ
        |   ЛокальныеУведомления.Поездка = &Поездка
        |   И ЛокальныеУведомления.Пассажир = &Пассажир";
	
	// Запрос выполняется для конкретных поездки и пользователя
    Запрос.УстановитьПараметр("Поездка", Поездка);
    Запрос.УстановитьПараметр("Пассажир", Пассажир);
    
    Выборка = Запрос.Выполнить().Выбрать();
    
    Пока Выборка.Следующий() Цикл
        Попытка
            // Собираем идентификаторы для отмены на клиенте
            МассивИдентификаторов.Добавить(Выборка.ИдентификаторУведомления);
            
            // Удаляем запись из справочника
            ОбъектУведомления = Выборка.Ссылка.ПолучитьОбъект();
            ОбъектУведомления.Удалить();
        Исключение
            Сообщить("Ошибка при удалении записи с идентификатором " + Выборка.ИдентификаторУведомления + ": " + ОписаниеОшибки());
        КонецПопытки;
    КонецЦикла;
    
    Возврат МассивИдентификаторов;
КонецФункции

// Обработка синхронизации данных с сервером
Процедура СинхронизироватьНажатие()
    СинхронизацияМобильногоУстройства.СинхронизироватьДанныеНажатие();
КонецПроцедуры

// Команда Отмена
&НаКлиенте
Процедура Отмена(Команда)
	Закрыть();
КонецПроцедуры

// Выполнение отмены на сервере
&НаСервере
Функция ВыполнитьОтменуНаСервере()
	Результат = Новый Структура("Успех, Сообщение, ВремяНачала, ВремяОкончания", Ложь, "", Дата(1,1,1), Дата(1,1,1));
	
	// Проверка статуса поездки
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Поездка.ПоездкаНачалась
		|ИЗ
		|	Документ.Поездка КАК Поездка
		|ГДЕ
		|	Поездка.Ссылка = &Поездка";
	
	Запрос.УстановитьПараметр("Поездка", Поездка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() И Выборка.ПоездкаНачалась = Истина Тогда
		Результат.Сообщение = НСтр("ru='Нельзя отменить поездку, так как она уже началась!'");
		Возврат Результат;
	КонецЕсли;
	
	// Проверка существования брони
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоездкаЗабронированныеМеста.НомерСтроки,
		|	ПоездкаЗабронированныеМеста.ОстановкаПосадки,
		|	ПоездкаЗабронированныеМеста.ОстановкаВысадки
		|ИЗ
		|	Документ.Поездка.ЗабронированныеМеста КАК ПоездкаЗабронированныеМеста
		|ГДЕ
		|	ПоездкаЗабронированныеМеста.Ссылка = &Поездка
		|	И ПоездкаЗабронированныеМеста.Пассажир = &Пользователь
		|	И ПоездкаЗабронированныеМеста.БроньОтменена = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Поездка", Поездка);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Результат.Сообщение = НСтр("ru='Бронь не найдена или уже отменена!'");
		Возврат Результат;
	КонецЕсли;
	
	// Получение данных брони
	ВыборкаБрони = РезультатЗапроса.Выбрать();
	ВыборкаБрони.Следующий();
	ОстановкаПосадки = ВыборкаБрони.ОстановкаПосадки;
	ОстановкаВысадки = ВыборкаБрони.ОстановкаВысадки;
	
	// Получение даты поездки и времени остановок
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Поездка.ДатаПоездки КАК ДатаПоездки,
		|	Поездка.КоличествоЗанятыхМест КАК КоличествоЗанятыхМест,
		|	Неопределено КАК Адрес,
		|	Неопределено КАК Время
		|ИЗ
		|	Документ.Поездка КАК Поездка
		|ГДЕ
		|	Поездка.Ссылка = &Поездка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Неопределено,
		|	Неопределено,
		|	ПоездкаМаршрутПоездки.Адрес,
		|	ПоездкаМаршрутПоездки.Время
		|ИЗ
		|	Документ.Поездка.МаршрутПоездки КАК ПоездкаМаршрутПоездки
		|ГДЕ
		|	ПоездкаМаршрутПоездки.Ссылка = &Поездка
		|	И ПоездкаМаршрутПоездки.Адрес В (&ОстановкаПосадки, &ОстановкаВысадки)";
	
	Запрос.УстановитьПараметр("Поездка", Поездка);
	Запрос.УстановитьПараметр("ОстановкаПосадки", ОстановкаПосадки);
	Запрос.УстановитьПараметр("ОстановкаВысадки", ОстановкаВысадки);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ДатаПоездки = Дата(1,1,1);
	ВремяПосадки = Дата(1,1,1);
	ВремяВысадки = Дата(1,1,1);
	КоличествоЗанятыхМест = 0;
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ДатаПоездки) Тогда
			ДатаПоездки = НачалоДня(Выборка.ДатаПоездки);
			КоличествоЗанятыхМест = Выборка.КоличествоЗанятыхМест;
		ИначеЕсли Выборка.Адрес = ОстановкаПосадки Тогда
			ВремяПосадки = Выборка.Время;
		ИначеЕсли Выборка.Адрес = ОстановкаВысадки Тогда
			ВремяВысадки = Выборка.Время;
		КонецЕсли;
	КонецЦикла;
	
	// Проверка данных
	Если ДатаПоездки = Дата(1,1,1) Или ВремяПосадки = Дата(1,1,1) Или ВремяВысадки = Дата(1,1,1) Тогда
		Результат.Сообщение = НСтр("ru='Не удалось определить дату или время поездки!'");
		Возврат Результат;
	КонецЕсли;
	
	// Формирование времени для календаря
	ВремяНачала = Дата(Год(ДатаПоездки), Месяц(ДатаПоездки), День(ДатаПоездки), Час(ВремяПосадки), Минута(ВремяПосадки), 0);
	ВремяОкончания = Дата(Год(ДатаПоездки), Месяц(ДатаПоездки), День(ДатаПоездки), Час(ВремяВысадки), Минута(ВремяВысадки), 0);
	
	Результат.ВремяНачала = ВремяНачала;
	Результат.ВремяОкончания = ВремяОкончания;
	
	// Обновление документа
	НачатьТранзакцию();
	Попытка
		// Блокировка документа
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.Поездка");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Поездка);
		Блокировка.Заблокировать();
		
		Док = Поездка.ПолучитьОбъект();
		Для Каждого Строка Из Док.ЗабронированныеМеста Цикл
			Если Строка.Пассажир = Пользователь И НЕ Строка.БроньОтменена Тогда
				Строка.ПричинаОтмены = ПричинаОтмены;
				Строка.БроньОтменена = Истина;
				Док.КоличествоЗанятыхМест = Док.КоличествоЗанятыхМест - 1;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Док.Записать(РежимЗаписиДокумента.Проведение);
		ЗафиксироватьТранзакцию();
		
		Результат.Успех = Истина;
	Исключение
		ОтменитьТранзакцию();
		Результат.Сообщение = НСтр("ru='Ошибка отмены: '") + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Результат;
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

// Обработчик выбора из списка причин отмены, если выбран пункт "Другое", то выводится на экран 
// предуреждение на 5 секунд
&НаКлиенте
Процедура ПричинаОтменыОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, ВыборДобавлением, СтандартнаяОбработка)
	// Обработка выбора
	Если ВыбранноеЗначение = "Другое" Тогда
		СтандартнаяОбработка = Ложь;
		// Предупреждение
		ПоказатьПредупреждение(, "Введите причину отмены вручную", 5);
		ПричинаОтмены = "";
	КонецЕсли;
КонецПроцедуры
